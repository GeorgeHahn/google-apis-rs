initSidebarItems({"enum":[["Error",""]],"fn":[["remove_json_null_values",""]],"struct":[["AdvertisedId","Defines a unique identifier of a beacon as broadcast by the device."],["AttachmentInfo","A subset of attachment information served via the `beaconinfo.getforobserved` method, used when your users encounter your beacons."],["Beacon","Details of a beacon device."],["BeaconActivateCall","(Re)activates a beacon. A beacon that is active will return information and attachment data when queried via `beaconinfo.getforobserved`. Calling this method on an already active beacon will do nothing (but will return a successful response code)."],["BeaconAttachment","Project-specific data associated with a beacon."],["BeaconAttachmentBatchDeleteCall","Deletes multiple attachments on a given beacon. This operation is permanent and cannot be undone. You can optionally specify `namespacedType` to choose which attachments should be deleted. If you do not specify `namespacedType`, all your attachments on the given beacon will be deleted. You also may explicitly specify `*/*` to delete all."],["BeaconAttachmentCreateCall","Associates the given data with the specified beacon. Attachment data must contain two parts: - A namespaced type.  - The actual attachment data itself.  The namespaced type consists of two parts, the namespace and the type. The namespace must be one of the values returned by the `namespaces` endpoint, while the type can be a string of any characters except for the forward slash (`/`) up to 100 characters in length. Attachment data can be up to 1024 bytes long."],["BeaconAttachmentDeleteCall","Deletes the specified attachment for the given beacon. Each attachment has a unique attachment name (`attachmentName`) which is returned when you fetch the attachment data via this API. You specify this with the delete request to control which attachment is removed. This operation cannot be undone."],["BeaconAttachmentListCall","Returns the attachments for the specified beacon that match the specified namespaced-type pattern. To control which namespaced types are returned, you add the `namespacedType` query parameter to the request. You must either use `*/*`, to return all attachments, or the namespace must be one of the ones returned from the `namespaces` endpoint."],["BeaconDeactivateCall","Deactivates a beacon. Once deactivated, the API will not return information nor attachment data for the beacon when queried via `beaconinfo.getforobserved`. Calling this method on an already inactive beacon will do nothing (but will return a successful response code)."],["BeaconDecommissionCall","Decommissions the specified beacon in the service. This beacon will no longer be returned from `beaconinfo.getforobserved`. This operation is permanent -- you will not be able to re-register a beacon with this ID again."],["BeaconDiagnosticListCall","List the diagnostics for a single beacon. You can also list diagnostics for all the beacons owned by your Google Developers Console project by using the beacon name `beacons/-`."],["BeaconGetCall","Returns detailed information about the specified beacon."],["BeaconInfo","A subset of beacon information served via the `beaconinfo.getforobserved` method, which you call when users of your app encounter your beacons."],["BeaconListCall","Searches the beacon registry for beacons that match the given search criteria. Only those beacons that the client has permission to list will be returned."],["BeaconMethods","A builder providing access to all methods supported on *beacon* resources. It is not used directly, but through the `Proximitybeacon` hub."],["BeaconRegisterCall","Registers a previously unregistered beacon given its `advertisedId`. These IDs are unique within the system. An ID can be registered only once."],["BeaconUpdateCall","Updates the information about the specified beacon. **Any field that you do not populate in the submitted beacon will be permanently erased**, so you should follow the \"read, modify, write\" pattern to avoid inadvertently destroying data. Changes to the beacon status via this method will be silently ignored. To update beacon status, use the separate methods on this API for (de)activation and decommissioning."],["BeaconinfoGetforobservedCall","Given one or more beacon observations, returns any beacon information and attachments accessible to your application."],["BeaconinfoMethods","A builder providing access to all methods supported on *beaconinfo* resources. It is not used directly, but through the `Proximitybeacon` hub."],["Date","Represents a whole calendar date, e.g. date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the Proleptic Gregorian Calendar. The day may be 0 to represent a year and month where the day is not significant, e.g. credit card expiration date. The year may be 0 to represent a month and day independent of year, e.g. anniversary date. Related types are [google.type.TimeOfDay][] and `google.protobuf.Timestamp`."],["DefaultDelegate","A delegate with a conservative default implementation, which is used if no other delegate is set."],["DeleteAttachmentsResponse","Response for a request to delete attachments."],["Diagnostics","Diagnostics for a single beacon."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["ErrorResponse","A utility to represent detailed errors we might see in case there are BadRequests. The latter happen if the sent parameters or request structures are unsound"],["GetInfoForObservedBeaconsRequest","Request for beacon and attachment information about beacons that a mobile client has encountered \"in the wild\"."],["GetInfoForObservedBeaconsResponse","Information about the requested beacons, optionally including attachment data."],["IndoorLevel","Indoor level, a human-readable string as returned by Google Maps APIs, useful to indicate which floor of a building a beacon is located on."],["LatLng","An object representing a latitude/longitude pair. This is expressed as a pair of doubles representing degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges. Example of normalization code in Python: def NormalizeLongitude(longitude): \"\"\"Wrapsdecimal degrees longitude to [-180.0, 180.0].\"\"\" q, r = divmod(longitude, 360.0) if r > 180.0 or (r == 180.0 and q <= -1.0): return r - 360.0 return r def NormalizeLatLng(latitude, longitude): \"\"\"Wraps decimal degrees latitude and longitude to [-180.0, 180.0] and [-90.0, 90.0], respectively.\"\"\" r = latitude % 360.0 if r = 270.0: return r - 360, NormalizeLongitude(longitude) else: return 180 - r, NormalizeLongitude(longitude + 180.0) assert 180.0 == NormalizeLongitude(180.0) assert -180.0 == NormalizeLongitude(-180.0) assert -179.0 == NormalizeLongitude(181.0) assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0) assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0) assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0) assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0) assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0) assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0) assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0) assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0) assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0) assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)"],["ListBeaconAttachmentsResponse","Response to ListBeaconAttachments that contains the requested attachments."],["ListBeaconsResponse","Response that contains list beacon results and pagination help."],["ListDiagnosticsResponse","Response that contains the requested diagnostics."],["ListNamespacesResponse","Response to ListNamespacesRequest that contains all the project's namespaces."],["MethodInfo","Contains information about an API request."],["MultiPartReader","Provides a `Read` interface that converts multiple parts into the protocol identified by RFC2387. **Note**: This implementation is just as rich as it needs to be to perform uploads to google APIs, and might not be a fully-featured implementation."],["Namespace","An attachment namespace defines read and write access for all the attachments created under it. Each namespace is globally unique, and owned by one project which is the only project that can create attachments under it."],["NamespaceListCall","Lists all attachment namespaces owned by your Google Developers Console project. Attachment data associated with a beacon must include a namespaced type, and the namespace must be owned by your project."],["NamespaceMethods","A builder providing access to all methods supported on *namespace* resources. It is not used directly, but through the `Proximitybeacon` hub."],["Observation","Represents one beacon observed once."],["Proximitybeacon","Central instance to access all Proximitybeacon related resource activities"]],"trait":[["CallBuilder","Identifies types which represent builders for a particular resource method"],["Delegate","A trait specifying functionality to help controlling any request performed by the API. The trait has a conservative default implementation."],["Hub","Identifies the Hub. There is only one per library, this trait is supposed to make intended use more explicit. The hub allows to access all resource methods more easily."],["MethodsBuilder","Identifies types for building methods of a particular resource type"],["NestedType","Identifies types which are only used by other types internally. They have no special meaning, this trait just marks them for completeness."],["Part","Identifies types which are only used as part of other types, which usually are carrying the `Resource` trait."],["ReadSeek","A utility to specify reader types which provide seeking capabilities too"],["RequestValue","Identifies types which are used in API requests."],["Resource","Identifies types which can be inserted and deleted. Types with this trait are most commonly used by clients of this API."],["ResponseResult","Identifies types which are used in API responses."],["ToParts","A trait for all types that can convert themselves into a *parts* string"]],"type":[["Result","A universal result type used as return for all calls."]]});