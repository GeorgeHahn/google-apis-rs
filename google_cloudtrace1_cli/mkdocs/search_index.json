{
    "docs": [
        {
            "location": "/", 
            "text": "The \ncloudtrace1\n command-line interface \n(CLI)\n allows to use most features of the \nGoogle Cloud Trace\n service from the comfort of your terminal.\n\n\nBy default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's\ncapabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero.\n\n\nIf data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools.\n\n\nEverything else about the \nCloud Trace\n API can be found at the\n\nofficial documentation site\n.\n\n\nInstallation and Source Code\n\n\nInstall the command-line interface with cargo using:\n\n\ncargo install google-cloudtrace1-cli\n\n\n\n\nFind the source code \non github\n.\n\n\nUsage\n\n\nThis documentation was generated from the \nCloud Trace\n API at revision \n20181004\n. The CLI is at version \n1.0.8\n.\n\n\ncloudtrace1 [options]\n        projects\n                patch-traces \nproject-id\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                traces-get \nproject-id\n \ntrace-id\n [-p \nv\n]... [-o \nout\n]\n                traces-list \nproject-id\n [-p \nv\n]... [-o \nout\n]\n  cloudtrace1 --help\n\nConfiguration:\n  [--scope \nurl\n]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir \nfolder\n\n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.\n\n\n\n\n\nConfiguration\n\n\nThe program will store all persistent data in the \n~/.google-service-cli\n directory in \nJSON\n files prefixed with \ncloudtrace1-\n.  You can change the directory used to store configuration with the \n--config-dir\n flag on a per-invocation basis.\n\n\nMore information about the various kinds of persistent data are given in the following paragraphs.\n\n\nAuthentication\n\n\nMost APIs require a user to authenticate any request. If this is the case, the \nscope\n determines the \nset of permissions granted. The granularity of these is usually no more than \nread-only\n or \nfull-access\n.\n\n\nIf not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the \n--scope\n flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.\n\n\nThe first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.\n\n\nIf a scope was authenticated by the user, the respective information will be stored as \nJSON\n in the configuration\ndirectory, e.g. \n~/.google-service-cli/cloudtrace1-token-\nscope-hash\n.json\n. No manual management of these tokens\nis necessary.\n\n\nTo revoke granted authentication, please refer to the \nofficial documentation\n.\n\n\nApplication Secrets\n\n\nIn order to allow any application to use Google services, it will need to be registered using the \n\nGoogle Developer Console\n. APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.\n\n\nTo allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.\n\n\nYou can workaround this limitation by putting your own secrets file at this location: \n\n~/.google-service-cli/cloudtrace1-secret.json\n, assuming that the required \ncloudtrace\n API \nwas enabled for it. Such a secret file can be downloaded in the \nGoogle Developer Console\n at \n\nAPIs \n auth -\n Credentials -\n Download JSON\n and used as is.\n\n\nLearn more about how to setup Google projects and enable APIs using the \nofficial documentation\n.\n\n\nDebugging\n\n\nEven though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error \nas-is\n.\n\n\nThe \n--debug\n flag will print all client-server communication to standard error, whereas the \n--debug-auth\n flag\nwill cause all communication related to authentication to standard error.\nIf the \n--debug\n flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.\n\n\nYou may consider redirecting standard error into a file for ease of use, e.g. \ncloudtrace1 --debug \nresource\n \nmethod\n [options] 2\ndebug.txt\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#installation-and-source-code", 
            "text": "Install the command-line interface with cargo using:  cargo install google-cloudtrace1-cli  Find the source code  on github .", 
            "title": "Installation and Source Code"
        }, 
        {
            "location": "/#usage", 
            "text": "This documentation was generated from the  Cloud Trace  API at revision  20181004 . The CLI is at version  1.0.8 .  cloudtrace1 [options]\n        projects\n                patch-traces  project-id  (-r  kv )... [-p  v ]... [-o  out ]\n                traces-get  project-id   trace-id  [-p  v ]... [-o  out ]\n                traces-list  project-id  [-p  v ]... [-o  out ]\n  cloudtrace1 --help\n\nConfiguration:\n  [--scope  url ]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir  folder \n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.", 
            "title": "Usage"
        }, 
        {
            "location": "/#configuration", 
            "text": "The program will store all persistent data in the  ~/.google-service-cli  directory in  JSON  files prefixed with  cloudtrace1- .  You can change the directory used to store configuration with the  --config-dir  flag on a per-invocation basis.  More information about the various kinds of persistent data are given in the following paragraphs.", 
            "title": "Configuration"
        }, 
        {
            "location": "/#authentication", 
            "text": "Most APIs require a user to authenticate any request. If this is the case, the  scope  determines the \nset of permissions granted. The granularity of these is usually no more than  read-only  or  full-access .  If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the  --scope  flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.  The first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.  If a scope was authenticated by the user, the respective information will be stored as  JSON  in the configuration\ndirectory, e.g.  ~/.google-service-cli/cloudtrace1-token- scope-hash .json . No manual management of these tokens\nis necessary.  To revoke granted authentication, please refer to the  official documentation .", 
            "title": "Authentication"
        }, 
        {
            "location": "/#application-secrets", 
            "text": "In order to allow any application to use Google services, it will need to be registered using the  Google Developer Console . APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.  To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.  You can workaround this limitation by putting your own secrets file at this location:  ~/.google-service-cli/cloudtrace1-secret.json , assuming that the required  cloudtrace  API \nwas enabled for it. Such a secret file can be downloaded in the  Google Developer Console  at  APIs   auth -  Credentials -  Download JSON  and used as is.  Learn more about how to setup Google projects and enable APIs using the  official documentation .", 
            "title": "Application Secrets"
        }, 
        {
            "location": "/#debugging", 
            "text": "Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error  as-is .  The  --debug  flag will print all client-server communication to standard error, whereas the  --debug-auth  flag\nwill cause all communication related to authentication to standard error.\nIf the  --debug  flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.  You may consider redirecting standard error into a file for ease of use, e.g.  cloudtrace1 --debug  resource   method  [options] 2 debug.txt .", 
            "title": "Debugging"
        }, 
        {
            "location": "/projects_patch-traces/", 
            "text": "Sends new traces to Stackdriver Trace or updates existing traces. If the ID\nof a trace that you send matches that of an existing trace, any fields\nin the existing trace and its spans are overwritten by the provided values,\nand any new fields provided are merged with the existing trace data. If the\nID does not match, a new trace is created.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/trace.append\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \ncloudtrace1 --scope \nscope\n projects patch-traces ...\n\n\nRequired Scalar Argument\n\n\n\n\nproject-id\n \n(string)\n\n\nID of the Cloud project where the trace data is stored.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nTraces:\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Patch Traces"
        }, 
        {
            "location": "/projects_patch-traces/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/trace.append   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  cloudtrace1 --scope  scope  projects patch-traces ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/projects_patch-traces/#required-scalar-argument", 
            "text": "project-id   (string)  ID of the Cloud project where the trace data is stored.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/projects_patch-traces/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  Traces:  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/projects_patch-traces/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/projects_patch-traces/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/projects_patch-traces/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/projects_traces-get/", 
            "text": "Gets a single trace by its ID.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/trace.readonly\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/trace.readonly\n.\nYou can set the scope for this method like this: \ncloudtrace1 --scope \nscope\n projects traces-get ...\n\n\nRequired Scalar Arguments\n\n\n\n\nproject-id\n \n(string)\n\n\nID of the Cloud project where the trace data is stored.\n\n\n\n\n\n\ntrace-id\n \n(string)\n\n\nID of the trace to return.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Traces Get"
        }, 
        {
            "location": "/projects_traces-get/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/trace.readonly   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/trace.readonly .\nYou can set the scope for this method like this:  cloudtrace1 --scope  scope  projects traces-get ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/projects_traces-get/#required-scalar-arguments", 
            "text": "project-id   (string)  ID of the Cloud project where the trace data is stored.    trace-id   (string)  ID of the trace to return.", 
            "title": "Required Scalar Arguments"
        }, 
        {
            "location": "/projects_traces-get/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/projects_traces-get/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/projects_traces-list/", 
            "text": "Returns of a list of traces that match the specified filter conditions.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/trace.readonly\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/trace.readonly\n.\nYou can set the scope for this method like this: \ncloudtrace1 --scope \nscope\n projects traces-list ...\n\n\nRequired Scalar Argument\n\n\n\n\nproject-id\n \n(string)\n\n\nID of the Cloud project where the trace data is stored.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p order-by=string\n\n\n\n\n\n\nField used to sort the returned traces. Optional.\n    Can be one of the following:\n\n\n\n\ntrace_id\n\n\nname\n (\nname\n field of root span in the trace)\n\n\nduration\n (difference between \nend_time\n and \nstart_time\n fields of\n     the root span)\n\n\nstart\n (\nstart_time\n field of the root span)\n\n\n\n\nDescending order can be specified by appending \ndesc\n to the sort field\n(for example, \nname desc\n).\n\n\nOnly one sort field is permitted.\n\n\n\n\n\n\n\n\n\n\n-p page-size=integer\n\n\n\n\nMaximum number of traces to return. If not specified or \n= 0, the\n    implementation selects a reasonable value.  The implementation may\n    return fewer traces than the requested page size. Optional.\n\n\n\n\n\n\n\n\n-p page-token=string\n\n\n\n\nToken identifying the page of results to return. If provided, use the\n    value of the \nnext_page_token\n field from a previous request. Optional.\n\n\n\n\n\n\n\n\n-p filter=string\n\n\n\n\n\n\nAn optional filter against labels for the request.\n\n\nBy default, searches use prefix matching. To specify exact match, prepend\na plus symbol (\n+\n) to the search term.\nMultiple terms are ANDed. Syntax:\n\n\n\n\nroot:NAME_PREFIX\n or \nNAME_PREFIX\n: Return traces where any root\n    span starts with \nNAME_PREFIX\n.\n\n\n+root:NAME\n or \n+NAME\n: Return traces where any root span\ns name is\n    exactly \nNAME\n.\n\n\nspan:NAME_PREFIX\n: Return traces where any span starts with\n    \nNAME_PREFIX\n.\n\n\n+span:NAME\n: Return traces where any span\ns name is exactly\n    \nNAME\n.\n\n\nlatency:DURATION\n: Return traces whose overall latency is\n    greater or equal to than \nDURATION\n. Accepted units are nanoseconds\n    (\nns\n), milliseconds (\nms\n), and seconds (\ns\n). Default is \nms\n. For\n    example, \nlatency:24ms\n returns traces whose overall latency\n    is greater than or equal to 24 milliseconds.\n\n\nlabel:LABEL_KEY\n: Return all traces containing the specified\n    label key (exact match, case-sensitive) regardless of the key:value\n    pair\ns value (including empty values).\n\n\nLABEL_KEY:VALUE_PREFIX\n: Return all traces containing the specified\n    label key (exact match, case-sensitive) whose value starts with\n    \nVALUE_PREFIX\n. Both a key and a value must be specified.\n\n\n+LABEL_KEY:VALUE\n: Return all traces containing a key:value pair\n    exactly matching the specified text. Both a key and a value must be\n    specified.\n\n\nmethod:VALUE\n: Equivalent to \n/http/method:VALUE\n.\n\n\nurl:VALUE\n: Equivalent to \n/http/url:VALUE\n.\n\n\n\n\n\n\n\n\n\n\n\n\n-p view=string\n\n\n\n\nType of data returned for traces in the list. Optional. Default is\n    \nMINIMAL\n.\n\n\n\n\n\n\n\n\n-p end-time=string\n\n\n\n\nEnd of the time interval (inclusive) during which the trace data was\n    collected from the application.\n\n\n\n\n\n\n\n\n-p start-time=string\n\n\n\n\nStart of the time interval (inclusive) during which the trace data was\n    collected from the application.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Traces List"
        }, 
        {
            "location": "/projects_traces-list/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/trace.readonly   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/trace.readonly .\nYou can set the scope for this method like this:  cloudtrace1 --scope  scope  projects traces-list ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/projects_traces-list/#required-scalar-argument", 
            "text": "project-id   (string)  ID of the Cloud project where the trace data is stored.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/projects_traces-list/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/projects_traces-list/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p order-by=string    Field used to sort the returned traces. Optional.\n    Can be one of the following:   trace_id  name  ( name  field of root span in the trace)  duration  (difference between  end_time  and  start_time  fields of\n     the root span)  start  ( start_time  field of the root span)   Descending order can be specified by appending  desc  to the sort field\n(for example,  name desc ).  Only one sort field is permitted.      -p page-size=integer   Maximum number of traces to return. If not specified or  = 0, the\n    implementation selects a reasonable value.  The implementation may\n    return fewer traces than the requested page size. Optional.     -p page-token=string   Token identifying the page of results to return. If provided, use the\n    value of the  next_page_token  field from a previous request. Optional.     -p filter=string    An optional filter against labels for the request.  By default, searches use prefix matching. To specify exact match, prepend\na plus symbol ( + ) to the search term.\nMultiple terms are ANDed. Syntax:   root:NAME_PREFIX  or  NAME_PREFIX : Return traces where any root\n    span starts with  NAME_PREFIX .  +root:NAME  or  +NAME : Return traces where any root span s name is\n    exactly  NAME .  span:NAME_PREFIX : Return traces where any span starts with\n     NAME_PREFIX .  +span:NAME : Return traces where any span s name is exactly\n     NAME .  latency:DURATION : Return traces whose overall latency is\n    greater or equal to than  DURATION . Accepted units are nanoseconds\n    ( ns ), milliseconds ( ms ), and seconds ( s ). Default is  ms . For\n    example,  latency:24ms  returns traces whose overall latency\n    is greater than or equal to 24 milliseconds.  label:LABEL_KEY : Return all traces containing the specified\n    label key (exact match, case-sensitive) regardless of the key:value\n    pair s value (including empty values).  LABEL_KEY:VALUE_PREFIX : Return all traces containing the specified\n    label key (exact match, case-sensitive) whose value starts with\n     VALUE_PREFIX . Both a key and a value must be specified.  +LABEL_KEY:VALUE : Return all traces containing a key:value pair\n    exactly matching the specified text. Both a key and a value must be\n    specified.  method:VALUE : Equivalent to  /http/method:VALUE .  url:VALUE : Equivalent to  /http/url:VALUE .       -p view=string   Type of data returned for traces in the list. Optional. Default is\n     MINIMAL .     -p end-time=string   End of the time interval (inclusive) during which the trace data was\n    collected from the application.     -p start-time=string   Start of the time interval (inclusive) during which the trace data was\n    collected from the application.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/projects_traces-list/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }
    ]
}