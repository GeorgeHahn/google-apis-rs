{
    "docs": [
        {
            "location": "/", 
            "text": "The \nproximitybeacon1-beta1\n command-line interface \n(CLI)\n allows to use most features of the \nGoogle proximitybeacon\n service from the comfort of your terminal.\n\n\nBy default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's\ncapabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero.\n\n\nIf data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools.\n\n\nEverything else about the \nproximitybeacon\n API can be found at the\n\nofficial documentation site\n.\n\n\nInstallation and Source Code\n\n\nInstall the command-line interface with cargo using:\n\n\ncargo install google-proximitybeacon1_beta1-cli\n\n\n\n\nFind the source code \non github\n.\n\n\nUsage\n\n\nThis documentation was generated from the \nproximitybeacon\n API at revision \n20160429\n. The CLI is at version \n1.0.0\n.\n\n\nproximitybeacon1-beta1 [options]\n        beaconinfo\n                getforobserved (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n        beacons\n                activate \nbeacon-name\n [-p \nv\n]... [-o \nout\n]\n                attachments-batch-delete \nbeacon-name\n [-p \nv\n]... [-o \nout\n]\n                attachments-create \nbeacon-name\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                attachments-delete \nattachment-name\n [-p \nv\n]... [-o \nout\n]\n                attachments-list \nbeacon-name\n [-p \nv\n]... [-o \nout\n]\n                deactivate \nbeacon-name\n [-p \nv\n]... [-o \nout\n]\n                decommission \nbeacon-name\n [-p \nv\n]... [-o \nout\n]\n                diagnostics-list \nbeacon-name\n [-p \nv\n]... [-o \nout\n]\n                get \nbeacon-name\n [-p \nv\n]... [-o \nout\n]\n                list [-p \nv\n]... [-o \nout\n]\n                register (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                update \nbeacon-name\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n        methods\n                get-eidparams [-p \nv\n]... [-o \nout\n]\n        namespaces\n                list [-p \nv\n]... [-o \nout\n]\n                update \nnamespace-name\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n  proximitybeacon1-beta1 --help\n\nConfiguration:\n  [--scope \nurl\n]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir \nfolder\n\n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.\n\n\n\n\n\nConfiguration\n\n\nThe program will store all persistent data in the \n~/.google-service-cli\n directory in \nJSON\n files prefixed with \nproximitybeacon1-beta1-\n.  You can change the directory used to store configuration with the \n--config-dir\n flag on a per-invocation basis.\n\n\nMore information about the various kinds of persistent data are given in the following paragraphs.\n\n\nAuthentication\n\n\nMost APIs require a user to authenticate any request. If this is the case, the \nscope\n determines the \nset of permissions granted. The granularity of these is usually no more than \nread-only\n or \nfull-access\n.\n\n\nIf not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the \n--scope\n flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.\n\n\nThe first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.\n\n\nIf a scope was authenticated by the user, the respective information will be stored as \nJSON\n in the configuration\ndirectory, e.g. \n~/.google-service-cli/proximitybeacon1-beta1-token-\nscope-hash\n.json\n. No manual management of these tokens\nis necessary.\n\n\nTo revoke granted authentication, please refer to the \nofficial documentation\n.\n\n\nApplication Secrets\n\n\nIn order to allow any application to use Google services, it will need to be registered using the \n\nGoogle Developer Console\n. APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.\n\n\nTo allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.\n\n\nYou can workaround this limitation by putting your own secrets file at this location: \n\n~/.google-service-cli/proximitybeacon1-beta1-secret.json\n, assuming that the required \nproximitybeacon\n API \nwas enabled for it. Such a secret file can be downloaded in the \nGoogle Developer Console\n at \n\nAPIs \n auth -\n Credentials -\n Download JSON\n and used as is.\n\n\nLearn more about how to setup Google projects and enable APIs using the \nofficial documentation\n.\n\n\nDebugging\n\n\nEven though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error \nas-is\n.\n\n\nThe \n--debug\n flag will print all client-server communication to standard error, whereas the \n--debug-auth\n flag\nwill cause all communication related to authentication to standard error.\nIf the \n--debug\n flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.\n\n\nYou may consider redirecting standard error into a file for ease of use, e.g. \nproximitybeacon1-beta1 --debug \nresource\n \nmethod\n [options] 2\ndebug.txt\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#installation-and-source-code", 
            "text": "Install the command-line interface with cargo using:  cargo install google-proximitybeacon1_beta1-cli  Find the source code  on github .", 
            "title": "Installation and Source Code"
        }, 
        {
            "location": "/#usage", 
            "text": "This documentation was generated from the  proximitybeacon  API at revision  20160429 . The CLI is at version  1.0.0 .  proximitybeacon1-beta1 [options]\n        beaconinfo\n                getforobserved (-r  kv )... [-p  v ]... [-o  out ]\n        beacons\n                activate  beacon-name  [-p  v ]... [-o  out ]\n                attachments-batch-delete  beacon-name  [-p  v ]... [-o  out ]\n                attachments-create  beacon-name  (-r  kv )... [-p  v ]... [-o  out ]\n                attachments-delete  attachment-name  [-p  v ]... [-o  out ]\n                attachments-list  beacon-name  [-p  v ]... [-o  out ]\n                deactivate  beacon-name  [-p  v ]... [-o  out ]\n                decommission  beacon-name  [-p  v ]... [-o  out ]\n                diagnostics-list  beacon-name  [-p  v ]... [-o  out ]\n                get  beacon-name  [-p  v ]... [-o  out ]\n                list [-p  v ]... [-o  out ]\n                register (-r  kv )... [-p  v ]... [-o  out ]\n                update  beacon-name  (-r  kv )... [-p  v ]... [-o  out ]\n        methods\n                get-eidparams [-p  v ]... [-o  out ]\n        namespaces\n                list [-p  v ]... [-o  out ]\n                update  namespace-name  (-r  kv )... [-p  v ]... [-o  out ]\n  proximitybeacon1-beta1 --help\n\nConfiguration:\n  [--scope  url ]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir  folder \n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.", 
            "title": "Usage"
        }, 
        {
            "location": "/#configuration", 
            "text": "The program will store all persistent data in the  ~/.google-service-cli  directory in  JSON  files prefixed with  proximitybeacon1-beta1- .  You can change the directory used to store configuration with the  --config-dir  flag on a per-invocation basis.  More information about the various kinds of persistent data are given in the following paragraphs.", 
            "title": "Configuration"
        }, 
        {
            "location": "/#authentication", 
            "text": "Most APIs require a user to authenticate any request. If this is the case, the  scope  determines the \nset of permissions granted. The granularity of these is usually no more than  read-only  or  full-access .  If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the  --scope  flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.  The first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.  If a scope was authenticated by the user, the respective information will be stored as  JSON  in the configuration\ndirectory, e.g.  ~/.google-service-cli/proximitybeacon1-beta1-token- scope-hash .json . No manual management of these tokens\nis necessary.  To revoke granted authentication, please refer to the  official documentation .", 
            "title": "Authentication"
        }, 
        {
            "location": "/#application-secrets", 
            "text": "In order to allow any application to use Google services, it will need to be registered using the  Google Developer Console . APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.  To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.  You can workaround this limitation by putting your own secrets file at this location:  ~/.google-service-cli/proximitybeacon1-beta1-secret.json , assuming that the required  proximitybeacon  API \nwas enabled for it. Such a secret file can be downloaded in the  Google Developer Console  at  APIs   auth -  Credentials -  Download JSON  and used as is.  Learn more about how to setup Google projects and enable APIs using the  official documentation .", 
            "title": "Application Secrets"
        }, 
        {
            "location": "/#debugging", 
            "text": "Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error  as-is .  The  --debug  flag will print all client-server communication to standard error, whereas the  --debug-auth  flag\nwill cause all communication related to authentication to standard error.\nIf the  --debug  flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.  You may consider redirecting standard error into a file for ease of use, e.g.  proximitybeacon1-beta1 --debug  resource   method  [options] 2 debug.txt .", 
            "title": "Debugging"
        }, 
        {
            "location": "/beaconinfo_getforobserved/", 
            "text": "Given one or more beacon observations, returns any beacon information and attachments accessible to your application. Authorize by using the \nAPI key\n for the application.\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nGetInfoForObservedBeaconsRequest:\n  namespaced-types: [string]\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    namespaced-types=eirmod\n\n\nSpecifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format namespace/type. Accepts \n*\n to specify all types in all namespaces. Optional.\n\n\nEach invocation of this argument appends the given value to the array.\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Getforobserved"
        }, 
        {
            "location": "/beaconinfo_getforobserved/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  GetInfoForObservedBeaconsRequest:\n  namespaced-types: [string]  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    namespaced-types=eirmod  Specifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format namespace/type. Accepts  *  to specify all types in all namespaces. Optional.  Each invocation of this argument appends the given value to the array.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/beaconinfo_getforobserved/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/beaconinfo_getforobserved/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beaconinfo_getforobserved/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_activate/", 
            "text": "Activates a beacon. A beacon that is active will return information and attachment data when queried via \nbeaconinfo.getforobserved\n. Calling this method on an already active beacon will do nothing (but will return a successful response code). Authenticate using an \nOAuth access token\n from a signed-in user with \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons activate ...\n\n\nRequired Scalar Argument\n\n\n\n\nbeacon-name\n \n(string)\n\n\nBeacon that should be activated. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone-UID, \n4\n for Eddystone-EID, \n1\n for iBeacon, or \n5\n for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon\ns \nstable\n UID. Required.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id of the beacon to activate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Activate"
        }, 
        {
            "location": "/beacons_activate/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons activate ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_activate/#required-scalar-argument", 
            "text": "beacon-name   (string)  Beacon that should be activated. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone-UID,  4  for Eddystone-EID,  1  for iBeacon, or  5  for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon s  stable  UID. Required.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_activate/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_activate/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id of the beacon to activate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_activate/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_attachments-batch-delete/", 
            "text": "Deletes multiple attachments on a given beacon. This operation is permanent and cannot be undone. You can optionally specify \nnamespacedType\n to choose which attachments should be deleted. If you do not specify \nnamespacedType\n, all your attachments on the given beacon will be deleted. You also may explicitly specify \n*/*\n to delete all. Authenticate using an \nOAuth access token\n from a signed-in user with \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons attachments-batch-delete ...\n\n\nRequired Scalar Argument\n\n\n\n\nbeacon-name\n \n(string)\n\n\nThe beacon whose attachments should be deleted. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone-UID, \n4\n for Eddystone-EID, \n1\n for iBeacon, or \n5\n for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon\ns \nstable\n UID. Required.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p project-id=string\n\n\n\n\nThe project id to delete beacon attachments under. This field can be used when \n is specified to mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If \n is specified and the projectId string is empty, then the project making the request is used. Optional.\n\n\n\n\n\n\n\n\n-p namespaced-type=string\n\n\n\n\nSpecifies the namespace and type of attachments to delete in \nnamespace/type\n format. Accepts \n*/*\n to specify \nall types in all namespaces\n. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Attachments Batch Delete"
        }, 
        {
            "location": "/beacons_attachments-batch-delete/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons attachments-batch-delete ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_attachments-batch-delete/#required-scalar-argument", 
            "text": "beacon-name   (string)  The beacon whose attachments should be deleted. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone-UID,  4  for Eddystone-EID,  1  for iBeacon, or  5  for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon s  stable  UID. Required.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_attachments-batch-delete/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_attachments-batch-delete/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p project-id=string   The project id to delete beacon attachments under. This field can be used when   is specified to mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If   is specified and the projectId string is empty, then the project making the request is used. Optional.     -p namespaced-type=string   Specifies the namespace and type of attachments to delete in  namespace/type  format. Accepts  */*  to specify  all types in all namespaces . Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_attachments-batch-delete/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_attachments-create/", 
            "text": "Associates the given data with the specified beacon. Attachment data must contain two parts:\n\n- A namespaced type. \n- The actual attachment data itself.  The namespaced type consists of two parts, the namespace and the type. The namespace must be one of the values returned by the \nnamespaces\n endpoint, while the type can be a string of any characters except for the forward slash (\n/\n) up to 100 characters in length. Attachment data can be up to 1024 bytes long. Authenticate using an \nOAuth access token\n from a signed-in user with \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons attachments-create ...\n\n\nRequired Scalar Argument\n\n\n\n\nbeacon-name\n \n(string)\n\n\nBeacon on which the attachment should be created. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone-UID, \n4\n for Eddystone-EID, \n1\n for iBeacon, or \n5\n for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon\ns \nstable\n UID. Required.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nBeaconAttachment:\n  attachment-name: string\n  data: string\n  namespaced-type: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    attachment-name=sit\n\n\nResource name of this attachment. Attachment names have the format: beacons/beacon_id/attachments/attachment_id. Leave this empty on creation.\n\n\n\n\n\n\ndata=stet\n\n\nAn opaque data container for client-provided data. Must be \nbase64\n encoded in HTTP requests, and will be so encoded (with padding) in responses. Required.\n\n\n\n\n\n\nnamespaced-type=sed\n\n\nSpecifies what kind of attachment this is. Tells a client how to interpret the \ndata\n field. Format is namespace/type. Namespace provides type separation between clients. Type describes the type of \ndata\n, for use by the client when parsing the \ndata\n field. Required.\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id of the project the attachment will belong to. If the project id is not specified then the project making the request is used. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Attachments Create"
        }, 
        {
            "location": "/beacons_attachments-create/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons attachments-create ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_attachments-create/#required-scalar-argument", 
            "text": "beacon-name   (string)  Beacon on which the attachment should be created. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone-UID,  4  for Eddystone-EID,  1  for iBeacon, or  5  for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon s  stable  UID. Required.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_attachments-create/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  BeaconAttachment:\n  attachment-name: string\n  data: string\n  namespaced-type: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    attachment-name=sit  Resource name of this attachment. Attachment names have the format: beacons/beacon_id/attachments/attachment_id. Leave this empty on creation.    data=stet  An opaque data container for client-provided data. Must be  base64  encoded in HTTP requests, and will be so encoded (with padding) in responses. Required.    namespaced-type=sed  Specifies what kind of attachment this is. Tells a client how to interpret the  data  field. Format is namespace/type. Namespace provides type separation between clients. Type describes the type of  data , for use by the client when parsing the  data  field. Required.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/beacons_attachments-create/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/beacons_attachments-create/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_attachments-create/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id of the project the attachment will belong to. If the project id is not specified then the project making the request is used. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_attachments-create/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_attachments-delete/", 
            "text": "Deletes the specified attachment for the given beacon. Each attachment has a unique attachment name (\nattachmentName\n) which is returned when you fetch the attachment data via this API. You specify this with the delete request to control which attachment is removed. This operation cannot be undone. Authenticate using an \nOAuth access token\n from a signed-in user with \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons attachments-delete ...\n\n\nRequired Scalar Argument\n\n\n\n\nattachment-name\n \n(string)\n\n\nThe attachment name (\nattachmentName\n) of the attachment to remove. For example: \nbeacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738\n. For Eddystone-EID beacons, the beacon ID portion (\n3!893737abc9\n) may be the beacon\ns current EID, or its \nstable\n Eddystone-UID. Required.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id of the attachment to delete. If not provided, the project that is making the request is used. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Attachments Delete"
        }, 
        {
            "location": "/beacons_attachments-delete/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons attachments-delete ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_attachments-delete/#required-scalar-argument", 
            "text": "attachment-name   (string)  The attachment name ( attachmentName ) of the attachment to remove. For example:  beacons/3!893737abc9/attachments/c5e937-af0-494-959-ec49d12738 . For Eddystone-EID beacons, the beacon ID portion ( 3!893737abc9 ) may be the beacon s current EID, or its  stable  Eddystone-UID. Required.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_attachments-delete/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_attachments-delete/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id of the attachment to delete. If not provided, the project that is making the request is used. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_attachments-delete/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_attachments-list/", 
            "text": "Returns the attachments for the specified beacon that match the specified namespaced-type pattern. To control which namespaced types are returned, you add the \nnamespacedType\n query parameter to the request. You must either use \n*/*\n, to return all attachments, or the namespace must be one of the ones returned from the \nnamespaces\n endpoint. Authenticate using an \nOAuth access token\n from a signed-in user with \nviewer\n, \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons attachments-list ...\n\n\nRequired Scalar Argument\n\n\n\n\nbeacon-name\n \n(string)\n\n\nBeacon whose attachments should be fetched. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone-UID, \n4\n for Eddystone-EID, \n1\n for iBeacon, or \n5\n for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon\ns \nstable\n UID. Required.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p project-id=string\n\n\n\n\nThe project id to list beacon attachments under. This field can be used when \n is specified to mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If \n is specified and the projectId string is empty, then the project making the request is used. Optional.\n\n\n\n\n\n\n\n\n-p namespaced-type=string\n\n\n\n\nSpecifies the namespace and type of attachment to include in response in namespace/type format. Accepts \n*/*\n to specify \nall types in all namespaces\n.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Attachments List"
        }, 
        {
            "location": "/beacons_attachments-list/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons attachments-list ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_attachments-list/#required-scalar-argument", 
            "text": "beacon-name   (string)  Beacon whose attachments should be fetched. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone-UID,  4  for Eddystone-EID,  1  for iBeacon, or  5  for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon s  stable  UID. Required.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_attachments-list/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_attachments-list/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p project-id=string   The project id to list beacon attachments under. This field can be used when   is specified to mean all attachment namespaces. Projects may have multiple attachments with multiple namespaces. If   is specified and the projectId string is empty, then the project making the request is used. Optional.     -p namespaced-type=string   Specifies the namespace and type of attachment to include in response in namespace/type format. Accepts  */*  to specify  all types in all namespaces .", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_attachments-list/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_deactivate/", 
            "text": "Deactivates a beacon. Once deactivated, the API will not return information nor attachment data for the beacon when queried via \nbeaconinfo.getforobserved\n. Calling this method on an already inactive beacon will do nothing (but will return a successful response code). Authenticate using an \nOAuth access token\n from a signed-in user with \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons deactivate ...\n\n\nRequired Scalar Argument\n\n\n\n\nbeacon-name\n \n(string)\n\n\nBeacon that should be deactivated. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone-UID, \n4\n for Eddystone-EID, \n1\n for iBeacon, or \n5\n for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon\ns \nstable\n UID. Required.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id of the beacon to deactivate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Deactivate"
        }, 
        {
            "location": "/beacons_deactivate/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons deactivate ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_deactivate/#required-scalar-argument", 
            "text": "beacon-name   (string)  Beacon that should be deactivated. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone-UID,  4  for Eddystone-EID,  1  for iBeacon, or  5  for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon s  stable  UID. Required.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_deactivate/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_deactivate/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id of the beacon to deactivate. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_deactivate/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_decommission/", 
            "text": "Decommissions the specified beacon in the service. This beacon will no longer be returned from \nbeaconinfo.getforobserved\n. This operation is permanent -- you will not be able to re-register a beacon with this ID again. Authenticate using an \nOAuth access token\n from a signed-in user with \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons decommission ...\n\n\nRequired Scalar Argument\n\n\n\n\nbeacon-name\n \n(string)\n\n\nBeacon that should be decommissioned. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone-UID, \n4\n for Eddystone-EID, \n1\n for iBeacon, or \n5\n for AltBeacon. For Eddystone-EID beacons, you may use either the current EID of the beacon\ns \nstable\n UID. Required.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id of the beacon to decommission. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Decommission"
        }, 
        {
            "location": "/beacons_decommission/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons decommission ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_decommission/#required-scalar-argument", 
            "text": "beacon-name   (string)  Beacon that should be decommissioned. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone-UID,  4  for Eddystone-EID,  1  for iBeacon, or  5  for AltBeacon. For Eddystone-EID beacons, you may use either the current EID of the beacon s  stable  UID. Required.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_decommission/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_decommission/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id of the beacon to decommission. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_decommission/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_diagnostics-list/", 
            "text": "List the diagnostics for a single beacon. You can also list diagnostics for all the beacons owned by your Google Developers Console project by using the beacon name \nbeacons/-\n. Authenticate using an \nOAuth access token\n from a signed-in user with \nviewer\n, \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons diagnostics-list ...\n\n\nRequired Scalar Argument\n\n\n\n\nbeacon-name\n \n(string)\n\n\nBeacon that the diagnostics are for.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p page-token=string\n\n\n\n\nRequests results that occur after the \npage_token\n, obtained from the response to a previous request. Optional.\n\n\n\n\n\n\n\n\n-p alert-filter=string\n\n\n\n\nRequests only beacons that have the given alert. For example, to find beacons that have low batteries use \nalert_filter=LOW_BATTERY\n.\n\n\n\n\n\n\n\n\n-p project-id=string\n\n\n\n\nRequests only diagnostic records for the given project id. If not set, then the project making the request will be used for looking up diagnostic records. Optional.\n\n\n\n\n\n\n\n\n-p page-size=integer\n\n\n\n\nSpecifies the maximum number of results to return. Defaults to 10. Maximum 1000. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Diagnostics List"
        }, 
        {
            "location": "/beacons_diagnostics-list/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons diagnostics-list ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_diagnostics-list/#required-scalar-argument", 
            "text": "beacon-name   (string)  Beacon that the diagnostics are for.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_diagnostics-list/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_diagnostics-list/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p page-token=string   Requests results that occur after the  page_token , obtained from the response to a previous request. Optional.     -p alert-filter=string   Requests only beacons that have the given alert. For example, to find beacons that have low batteries use  alert_filter=LOW_BATTERY .     -p project-id=string   Requests only diagnostic records for the given project id. If not set, then the project making the request will be used for looking up diagnostic records. Optional.     -p page-size=integer   Specifies the maximum number of results to return. Defaults to 10. Maximum 1000. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_diagnostics-list/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_get/", 
            "text": "Returns detailed information about the specified beacon. Authenticate using an \nOAuth access token\n from a signed-in user with \nviewer\n, \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project. Requests may supply an Eddystone-EID beacon name in the form: \nbeacons/4!beaconId\n where the \nbeaconId\n is the base16 ephemeral ID broadcast by the beacon. The returned \nBeacon\n object will contain the beacon\ns stable Eddystone-UID. Clients not authorized to resolve the beacon\ns ephemeral Eddystone-EID broadcast will receive an error.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons get ...\n\n\nRequired Scalar Argument\n\n\n\n\nbeacon-name\n \n(string)\n\n\nResource name of this beacon. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone-UID, \n4\n for Eddystone-EID, \n1\n for iBeacon, or \n5\n for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon\ns \nstable\n UID. Required.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id of the beacon to request. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Get"
        }, 
        {
            "location": "/beacons_get/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons get ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_get/#required-scalar-argument", 
            "text": "beacon-name   (string)  Resource name of this beacon. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone-UID,  4  for Eddystone-EID,  1  for iBeacon, or  5  for AltBeacon. For Eddystone-EID beacons, you may use either the current EID or the beacon s  stable  UID. Required.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_get/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_get/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id of the beacon to request. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_get/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_list/", 
            "text": "Searches the beacon registry for beacons that match the given search criteria. Only those beacons that the client has permission to list will be returned. Authenticate using an \nOAuth access token\n from a signed-in user with \nviewer\n, \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons list ...\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p page-token=string\n\n\n\n\nA pagination token obtained from a previous request to list beacons.\n\n\n\n\n\n\n\n\n-p project-id=string\n\n\n\n\nThe project id to list beacons under. If not present then the project credential that made the request is used as the project. Optional.\n\n\n\n\n\n\n\n\n-p page-size=integer\n\n\n\n\nThe maximum number of records to return for this request, up to a server-defined upper limit.\n\n\n\n\n\n\n\n\n-p q=string\n\n\n\n\nFilter query string that supports the following field filters: * \ndescription:\n#34;\n#34;\n For example: \ndescription:\n#34;Room 3\n#34;\n Returns beacons whose description matches tokens in the string \nRoom 3\n (not necessarily that exact string). The string must be double-quoted. * \nstatus:\n For example: \nstatus:active\n Returns beacons whose status matches the given value. Values must be one of the Beacon.Status enum values (case insensitive). Accepts multiple filters which will be combined with OR logic. * \nstability:\n For example: \nstability:mobile\n Returns beacons whose expected stability matches the given value. Values must be one of the Beacon.Stability enum values (case insensitive). Accepts multiple filters which will be combined with OR logic. * \nplace_id:\n#34;\n#34;\n For example: \nplace_id:\n#34;ChIJVSZzVR8FdkgRXGmmm6SslKw=\n#34;\n Returns beacons explicitly registered at the given place, expressed as a Place ID obtained from \nGoogle Places API\n. Does not match places inside the given place. Does not consider the beacon\ns actual location (which may be different from its registered place). Accepts multiple filters that will be combined with OR logic. The place ID must be double-quoted. * \nregistration_time[|=]\n For example: \nregistration_time\ngt;=1433116800\n Returns beacons whose registration time matches the given filter. Supports the operators: , =. Timestamp must be expressed as an integer number of seconds since midnight January 1, 1970 UTC. Accepts at most two filters that will be combined with AND logic, to support \nbetween\n semantics. If more than two are supplied, the latter ones are ignored. * \nlat: lng: radius:\n For example: \nlat:51.1232343 lng:-1.093852 radius:1000\n Returns beacons whose registered location is within the given circle. When any of these fields are given, all are required. Latitude and longitude must be decimal degrees between -90.0 and 90.0 and between -180.0 and 180.0 respectively. Radius must be an integer number of meters between 10 and 1,000,000 (1000 km). * \nproperty:\n#34;=\n#34;\n For example: \nproperty:\n#34;battery-type=CR2032\n#34;\n Returns beacons which have a property of the given name and value. Supports multiple filters which will be combined with OR logic. The entire name=value string must be double-quoted as one string. * \nattachment_type:\n#34;\n#34;\n For example: \nattachment_type:\n#34;my-namespace/my-type\n#34;\n Returns beacons having at least one attachment of the given namespaced type. Supports \nany within this namespace\n via the partial wildcard syntax: \nmy-namespace/*\n. Supports multiple filters which will be combined with OR logic. The string must be double-quoted. Multiple filters on the same field are combined with OR logic (except registration_time which is combined with AND logic). Multiple filters on different fields are combined with AND logic. Filters should be separated by spaces. As with any HTTP query string parameter, the whole filter expression must be URL-encoded. Example REST request: \nGET /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "List"
        }, 
        {
            "location": "/beacons_list/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons list ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_list/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_list/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p page-token=string   A pagination token obtained from a previous request to list beacons.     -p project-id=string   The project id to list beacons under. If not present then the project credential that made the request is used as the project. Optional.     -p page-size=integer   The maximum number of records to return for this request, up to a server-defined upper limit.     -p q=string   Filter query string that supports the following field filters: *  description: #34; #34;  For example:  description: #34;Room 3 #34;  Returns beacons whose description matches tokens in the string  Room 3  (not necessarily that exact string). The string must be double-quoted. *  status:  For example:  status:active  Returns beacons whose status matches the given value. Values must be one of the Beacon.Status enum values (case insensitive). Accepts multiple filters which will be combined with OR logic. *  stability:  For example:  stability:mobile  Returns beacons whose expected stability matches the given value. Values must be one of the Beacon.Stability enum values (case insensitive). Accepts multiple filters which will be combined with OR logic. *  place_id: #34; #34;  For example:  place_id: #34;ChIJVSZzVR8FdkgRXGmmm6SslKw= #34;  Returns beacons explicitly registered at the given place, expressed as a Place ID obtained from  Google Places API . Does not match places inside the given place. Does not consider the beacon s actual location (which may be different from its registered place). Accepts multiple filters that will be combined with OR logic. The place ID must be double-quoted. *  registration_time[|=]  For example:  registration_time gt;=1433116800  Returns beacons whose registration time matches the given filter. Supports the operators: , =. Timestamp must be expressed as an integer number of seconds since midnight January 1, 1970 UTC. Accepts at most two filters that will be combined with AND logic, to support  between  semantics. If more than two are supplied, the latter ones are ignored. *  lat: lng: radius:  For example:  lat:51.1232343 lng:-1.093852 radius:1000  Returns beacons whose registered location is within the given circle. When any of these fields are given, all are required. Latitude and longitude must be decimal degrees between -90.0 and 90.0 and between -180.0 and 180.0 respectively. Radius must be an integer number of meters between 10 and 1,000,000 (1000 km). *  property: #34;= #34;  For example:  property: #34;battery-type=CR2032 #34;  Returns beacons which have a property of the given name and value. Supports multiple filters which will be combined with OR logic. The entire name=value string must be double-quoted as one string. *  attachment_type: #34; #34;  For example:  attachment_type: #34;my-namespace/my-type #34;  Returns beacons having at least one attachment of the given namespaced type. Supports  any within this namespace  via the partial wildcard syntax:  my-namespace/* . Supports multiple filters which will be combined with OR logic. The string must be double-quoted. Multiple filters on the same field are combined with OR logic (except registration_time which is combined with AND logic). Multiple filters on different fields are combined with AND logic. Filters should be separated by spaces. As with any HTTP query string parameter, the whole filter expression must be URL-encoded. Example REST request:  GET /v1beta1/beacons?q=status:active%20lat:51.123%20lng:-1.095%20radius:1000", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_list/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_register/", 
            "text": "Registers a previously unregistered beacon given its \nadvertisedId\n. These IDs are unique within the system. An ID can be registered only once. Authenticate using an \nOAuth access token\n from a signed-in user with \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons register ...\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nBeacon:\n  advertised-id:\n    id: string\n    type: string\n  beacon-name: string\n  description: string\n  ephemeral-id-registration:\n    beacon-ecdh-public-key: string\n    beacon-identity-key: string\n    initial-clock-value: string\n    initial-eid: string\n    rotation-period-exponent: integer\n    service-ecdh-public-key: string\n  expected-stability: string\n  indoor-level:\n    name: string\n  lat-lng:\n    latitude: number\n    longitude: number\n  place-id: string\n  properties: { string: string }\n  provisioning-key: string\n  status: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .advertised-id    id=et\n\n\nThe actual beacon identifier, as broadcast by the beacon hardware. Must be \nbase64\n encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required.\n\n\n\n\n\n\n\n\ntype=dolores\n\n\n\n\nSpecifies the identifier type. Required.\n\n\n\n\n\n\n\n\n..    beacon-name=kasd\n\n\n\n\nResource name of this beacon. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone, \n1\n for iBeacon, or \n5\n for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.\n\n\n\n\n\n\ndescription=accusam\n\n\nFree text used to identify and describe the beacon. Maximum length 140 characters. Optional.\n\n\n\n\n\n\nephemeral-id-registration    beacon-ecdh-public-key=takimata\n\n\nThe beacon\ns public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, \nservice_ecdh_public_key\n must also be populated, and \nbeacon_identity_key\n must not be.\n\n\n\n\n\n\nbeacon-identity-key=justo\n\n\nThe private key of the beacon. If this field is populated, \nbeacon_ecdh_public_key\n and \nservice_ecdh_public_key\n must not be populated.\n\n\n\n\n\n\ninitial-clock-value=amet.\n\n\nThe initial clock value of the beacon. The beacon\ns clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero.\n\n\n\n\n\n\ninitial-eid=erat\n\n\nAn initial ephemeral ID calculated using the clock value submitted as \ninitial_clock_value\n, and the secret key generated by the Diffie-Hellman key exchange using \nservice_ecdh_public_key\n and \nservice_ecdh_public_key\n. This initial EID value will be used by the service to confirm that the key exchange process was successful.\n\n\n\n\n\n\nrotation-period-exponent=66\n\n\nIndicates the nominal period between each rotation of the beacon\ns ephemeral ID. \nNominal\n because the beacon should randomize the actual interval. See \nthe spec at github\n for details. This value corresponds to a power-of-two scaler on the beacon\ns clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.\n\n\n\n\n\n\n\n\nservice-ecdh-public-key=sea\n\n\n\n\nThe service\ns public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, \nbeacon_ecdh_public_key\n must also be populated, and \nbeacon_identity_key\n must not be.\n\n\n\n\n\n\n\n\n..    expected-stability=nonumy\n\n\n\n\nExpected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.\n\n\n\n\n\n\n\n\nindoor-level    name=dolores\n\n\n\n\nThe name of this level.\n\n\n\n\n\n\n\n\n..lat-lng    latitude=0.398739054055\n\n\n\n\nThe latitude in degrees. It must be in the range [-90.0, +90.0].\n\n\n\n\n\n\n\n\nlongitude=0.0653431304201\n\n\n\n\nThe longitude in degrees. It must be in the range [-180.0, +180.0].\n\n\n\n\n\n\n\n\n..    place-id=aliquyam\n\n\n\n\nThe \nGoogle Places API\n Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.\n\n\n\n\n\n\nproperties=key=ea\n\n\nProperties of the beacon device, for example battery type or firmware version. Optional.\n\n\nthe value will be associated with the given \nkey\n\n\n\n\n\n\nprovisioning-key=no\n\n\nSome beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to \nGET /v1beta1/beacons/3!beaconId\n from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon\ns confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.\n\n\n\n\n\n\nstatus=justo\n\n\nCurrent status of the beacon. Required.\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id of the project the beacon will be registered to. If the project id is not specified then the project making the request is used. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Register"
        }, 
        {
            "location": "/beacons_register/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons register ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_register/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  Beacon:\n  advertised-id:\n    id: string\n    type: string\n  beacon-name: string\n  description: string\n  ephemeral-id-registration:\n    beacon-ecdh-public-key: string\n    beacon-identity-key: string\n    initial-clock-value: string\n    initial-eid: string\n    rotation-period-exponent: integer\n    service-ecdh-public-key: string\n  expected-stability: string\n  indoor-level:\n    name: string\n  lat-lng:\n    latitude: number\n    longitude: number\n  place-id: string\n  properties: { string: string }\n  provisioning-key: string\n  status: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .advertised-id    id=et  The actual beacon identifier, as broadcast by the beacon hardware. Must be  base64  encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required.     type=dolores   Specifies the identifier type. Required.     ..    beacon-name=kasd   Resource name of this beacon. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone,  1  for iBeacon, or  5  for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.    description=accusam  Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.    ephemeral-id-registration    beacon-ecdh-public-key=takimata  The beacon s public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated,  service_ecdh_public_key  must also be populated, and  beacon_identity_key  must not be.    beacon-identity-key=justo  The private key of the beacon. If this field is populated,  beacon_ecdh_public_key  and  service_ecdh_public_key  must not be populated.    initial-clock-value=amet.  The initial clock value of the beacon. The beacon s clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero.    initial-eid=erat  An initial ephemeral ID calculated using the clock value submitted as  initial_clock_value , and the secret key generated by the Diffie-Hellman key exchange using  service_ecdh_public_key  and  service_ecdh_public_key . This initial EID value will be used by the service to confirm that the key exchange process was successful.    rotation-period-exponent=66  Indicates the nominal period between each rotation of the beacon s ephemeral ID.  Nominal  because the beacon should randomize the actual interval. See  the spec at github  for details. This value corresponds to a power-of-two scaler on the beacon s clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.     service-ecdh-public-key=sea   The service s public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated,  beacon_ecdh_public_key  must also be populated, and  beacon_identity_key  must not be.     ..    expected-stability=nonumy   Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.     indoor-level    name=dolores   The name of this level.     ..lat-lng    latitude=0.398739054055   The latitude in degrees. It must be in the range [-90.0, +90.0].     longitude=0.0653431304201   The longitude in degrees. It must be in the range [-180.0, +180.0].     ..    place-id=aliquyam   The  Google Places API  Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.    properties=key=ea  Properties of the beacon device, for example battery type or firmware version. Optional.  the value will be associated with the given  key    provisioning-key=no  Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to  GET /v1beta1/beacons/3!beaconId  from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon s confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.    status=justo  Current status of the beacon. Required.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/beacons_register/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/beacons_register/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_register/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id of the project the beacon will be registered to. If the project id is not specified then the project making the request is used. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_register/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/beacons_update/", 
            "text": "Updates the information about the specified beacon. \nAny field that you do not populate in the submitted beacon will be permanently erased\n, so you should follow the \nread, modify, write\n pattern to avoid inadvertently destroying data. Changes to the beacon status via this method will be silently ignored. To update beacon status, use the separate methods on this API for activation, deactivation, and decommissioning. Authenticate using an \nOAuth access token\n from a signed-in user with \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n beacons update ...\n\n\nRequired Scalar Argument\n\n\n\n\nbeacon-name\n \n(string)\n\n\nResource name of this beacon. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone, \n1\n for iBeacon, or \n5\n for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nBeacon:\n  advertised-id:\n    id: string\n    type: string\n  beacon-name: string\n  description: string\n  ephemeral-id-registration:\n    beacon-ecdh-public-key: string\n    beacon-identity-key: string\n    initial-clock-value: string\n    initial-eid: string\n    rotation-period-exponent: integer\n    service-ecdh-public-key: string\n  expected-stability: string\n  indoor-level:\n    name: string\n  lat-lng:\n    latitude: number\n    longitude: number\n  place-id: string\n  properties: { string: string }\n  provisioning-key: string\n  status: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .advertised-id    id=justo\n\n\nThe actual beacon identifier, as broadcast by the beacon hardware. Must be \nbase64\n encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required.\n\n\n\n\n\n\n\n\ntype=et\n\n\n\n\nSpecifies the identifier type. Required.\n\n\n\n\n\n\n\n\n..    beacon-name=et\n\n\n\n\nResource name of this beacon. A beacon name has the format \nbeacons/N!beaconId\n where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon\ns type. Possible values are \n3\n for Eddystone, \n1\n for iBeacon, or \n5\n for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.\n\n\n\n\n\n\ndescription=diam\n\n\nFree text used to identify and describe the beacon. Maximum length 140 characters. Optional.\n\n\n\n\n\n\nephemeral-id-registration    beacon-ecdh-public-key=ipsum\n\n\nThe beacon\ns public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, \nservice_ecdh_public_key\n must also be populated, and \nbeacon_identity_key\n must not be.\n\n\n\n\n\n\nbeacon-identity-key=lorem\n\n\nThe private key of the beacon. If this field is populated, \nbeacon_ecdh_public_key\n and \nservice_ecdh_public_key\n must not be populated.\n\n\n\n\n\n\ninitial-clock-value=et\n\n\nThe initial clock value of the beacon. The beacon\ns clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero.\n\n\n\n\n\n\ninitial-eid=duo\n\n\nAn initial ephemeral ID calculated using the clock value submitted as \ninitial_clock_value\n, and the secret key generated by the Diffie-Hellman key exchange using \nservice_ecdh_public_key\n and \nservice_ecdh_public_key\n. This initial EID value will be used by the service to confirm that the key exchange process was successful.\n\n\n\n\n\n\nrotation-period-exponent=69\n\n\nIndicates the nominal period between each rotation of the beacon\ns ephemeral ID. \nNominal\n because the beacon should randomize the actual interval. See \nthe spec at github\n for details. This value corresponds to a power-of-two scaler on the beacon\ns clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.\n\n\n\n\n\n\n\n\nservice-ecdh-public-key=sea\n\n\n\n\nThe service\ns public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, \nbeacon_ecdh_public_key\n must also be populated, and \nbeacon_identity_key\n must not be.\n\n\n\n\n\n\n\n\n..    expected-stability=lorem\n\n\n\n\nExpected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.\n\n\n\n\n\n\n\n\nindoor-level    name=eos\n\n\n\n\nThe name of this level.\n\n\n\n\n\n\n\n\n..lat-lng    latitude=0.200981494395\n\n\n\n\nThe latitude in degrees. It must be in the range [-90.0, +90.0].\n\n\n\n\n\n\n\n\nlongitude=0.0673002722736\n\n\n\n\nThe longitude in degrees. It must be in the range [-180.0, +180.0].\n\n\n\n\n\n\n\n\n..    place-id=dolor\n\n\n\n\nThe \nGoogle Places API\n Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.\n\n\n\n\n\n\nproperties=key=eirmod\n\n\nProperties of the beacon device, for example battery type or firmware version. Optional.\n\n\nthe value will be associated with the given \nkey\n\n\n\n\n\n\nprovisioning-key=elitr\n\n\nSome beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to \nGET /v1beta1/beacons/3!beaconId\n from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon\ns confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.\n\n\n\n\n\n\nstatus=amet\n\n\nCurrent status of the beacon. Required.\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id of the beacon to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Update"
        }, 
        {
            "location": "/beacons_update/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  beacons update ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/beacons_update/#required-scalar-argument", 
            "text": "beacon-name   (string)  Resource name of this beacon. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone,  1  for iBeacon, or  5  for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/beacons_update/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  Beacon:\n  advertised-id:\n    id: string\n    type: string\n  beacon-name: string\n  description: string\n  ephemeral-id-registration:\n    beacon-ecdh-public-key: string\n    beacon-identity-key: string\n    initial-clock-value: string\n    initial-eid: string\n    rotation-period-exponent: integer\n    service-ecdh-public-key: string\n  expected-stability: string\n  indoor-level:\n    name: string\n  lat-lng:\n    latitude: number\n    longitude: number\n  place-id: string\n  properties: { string: string }\n  provisioning-key: string\n  status: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .advertised-id    id=justo  The actual beacon identifier, as broadcast by the beacon hardware. Must be  base64  encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required.     type=et   Specifies the identifier type. Required.     ..    beacon-name=et   Resource name of this beacon. A beacon name has the format  beacons/N!beaconId  where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon s type. Possible values are  3  for Eddystone,  1  for iBeacon, or  5  for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.    description=diam  Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.    ephemeral-id-registration    beacon-ecdh-public-key=ipsum  The beacon s public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated,  service_ecdh_public_key  must also be populated, and  beacon_identity_key  must not be.    beacon-identity-key=lorem  The private key of the beacon. If this field is populated,  beacon_ecdh_public_key  and  service_ecdh_public_key  must not be populated.    initial-clock-value=et  The initial clock value of the beacon. The beacon s clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero.    initial-eid=duo  An initial ephemeral ID calculated using the clock value submitted as  initial_clock_value , and the secret key generated by the Diffie-Hellman key exchange using  service_ecdh_public_key  and  service_ecdh_public_key . This initial EID value will be used by the service to confirm that the key exchange process was successful.    rotation-period-exponent=69  Indicates the nominal period between each rotation of the beacon s ephemeral ID.  Nominal  because the beacon should randomize the actual interval. See  the spec at github  for details. This value corresponds to a power-of-two scaler on the beacon s clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.     service-ecdh-public-key=sea   The service s public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated,  beacon_ecdh_public_key  must also be populated, and  beacon_identity_key  must not be.     ..    expected-stability=lorem   Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.     indoor-level    name=eos   The name of this level.     ..lat-lng    latitude=0.200981494395   The latitude in degrees. It must be in the range [-90.0, +90.0].     longitude=0.0673002722736   The longitude in degrees. It must be in the range [-180.0, +180.0].     ..    place-id=dolor   The  Google Places API  Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.    properties=key=eirmod  Properties of the beacon device, for example battery type or firmware version. Optional.  the value will be associated with the given  key    provisioning-key=elitr  Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to  GET /v1beta1/beacons/3!beaconId  from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon s confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.    status=amet  Current status of the beacon. Required.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/beacons_update/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/beacons_update/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/beacons_update/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id of the beacon to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/beacons_update/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/methods_get-eidparams/", 
            "text": "Gets the Proximity Beacon API\ns current public key and associated parameters used to initiate the Diffie-Hellman key exchange required to register a beacon that broadcasts the Eddystone-EID format. This key changes periodically; clients may cache it and re-use the same public key to provision and register multiple beacons. However, clients should be prepared to refresh this key when they encounter an error registering an Eddystone-EID beacon.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n methods get-eidparams ...\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Get Eidparams"
        }, 
        {
            "location": "/methods_get-eidparams/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  methods get-eidparams ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/methods_get-eidparams/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/methods_get-eidparams/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/namespaces_list/", 
            "text": "Lists all attachment namespaces owned by your Google Developers Console project. Attachment data associated with a beacon must include a namespaced type, and the namespace must be owned by your project. Authenticate using an \nOAuth access token\n from a signed-in user with \nviewer\n, \nIs owner\n or \nCan edit\n permissions in the Google Developers Console project.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n namespaces list ...\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id to list namespaces under. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "List"
        }, 
        {
            "location": "/namespaces_list/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  namespaces list ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/namespaces_list/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/namespaces_list/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id to list namespaces under. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/namespaces_list/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/namespaces_update/", 
            "text": "Updates the information about the specified namespace. Only the namespace visibility can be updated.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userlocation.beacon.registry\n.\nYou can set the scope for this method like this: \nproximitybeacon1-beta1 --scope \nscope\n namespaces update ...\n\n\nRequired Scalar Argument\n\n\n\n\nnamespace-name\n \n(string)\n\n\nResource name of this namespace. Namespaces names have the format: namespaces/namespace.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nNamespace:\n  namespace-name: string\n  serving-visibility: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    namespace-name=no\n\n\nResource name of this namespace. Namespaces names have the format: namespaces/namespace.\n\n\n\n\n\n\nserving-visibility=labore\n\n\nSpecifies what clients may receive attachments under this namespace via \nbeaconinfo.getforobserved\n.\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p project-id=string\n\n\nThe project id of the namespace to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p bearer-token=string\n\n\n\n\nOAuth bearer token.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pp=boolean\n\n\n\n\nPretty-print response.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Update"
        }, 
        {
            "location": "/namespaces_update/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userlocation.beacon.registry  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userlocation.beacon.registry .\nYou can set the scope for this method like this:  proximitybeacon1-beta1 --scope  scope  namespaces update ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/namespaces_update/#required-scalar-argument", 
            "text": "namespace-name   (string)  Resource name of this namespace. Namespaces names have the format: namespaces/namespace.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/namespaces_update/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  Namespace:\n  namespace-name: string\n  serving-visibility: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    namespace-name=no  Resource name of this namespace. Namespaces names have the format: namespaces/namespace.    serving-visibility=labore  Specifies what clients may receive attachments under this namespace via  beaconinfo.getforobserved .", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/namespaces_update/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/namespaces_update/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/namespaces_update/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p project-id=string  The project id of the namespace to update. If the project id is not specified then the project making the request is used. The project id must match the project that owns the beacon. Optional.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/namespaces_update/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p bearer-token=string   OAuth bearer token.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pp=boolean   Pretty-print response.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }
    ]
}