initSidebarItems({"enum":[["Error",""],["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"fn":[["remove_json_null_values",""]],"struct":[["AliasContext","An alias to a repo revision."],["Breakpoint","Represents the breakpoint specification, status and results."],["Chunk",""],["CloudDebugger","Central instance to access all CloudDebugger related resource activities"],["CloudRepoSourceContext","A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform)."],["CloudWorkspaceId","A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed."],["CloudWorkspaceSourceContext","A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot."],["ContentRange","Implements the Content-Range header, for serialization only"],["ControllerDebuggeeBreakpointListCall","Returns the list of all active breakpoints for the debuggee."],["ControllerDebuggeeBreakpointUpdateCall","Updates the breakpoint state or mutable fields. The entire Breakpoint message must be sent back to the controller service."],["ControllerDebuggeeRegisterCall","Registers the debuggee with the controller service."],["ControllerMethods","A builder providing access to all methods supported on controller resources. It is not used directly, but through the `CloudDebugger` hub."],["Debuggee","Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering."],["DebuggerDebuggeeBreakpointDeleteCall","Deletes the breakpoint from the debuggee."],["DebuggerDebuggeeBreakpointGetCall","Gets breakpoint information."],["DebuggerDebuggeeBreakpointListCall","Lists all breakpoints for the debuggee."],["DebuggerDebuggeeBreakpointSetCall","Sets the breakpoint to the debuggee."],["DebuggerDebuggeeListCall","Lists all the debuggees that the user has access to."],["DebuggerMethods","A builder providing access to all methods supported on debugger resources. It is not used directly, but through the `CloudDebugger` hub."],["DefaultDelegate","A delegate with a conservative default implementation, which is used if no other delegate is set."],["DummyNetworkStream",""],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:"],["ErrorResponse","A utility to represent detailed errors we might see in case there are BadRequests. The latter happen if the sent parameters or request structures are unsound"],["ExtendedSourceContext","An ExtendedSourceContext is a SourceContext combined with additional details describing the context."],["FormatMessage","Represents a message with parameters."],["GerritSourceContext","A SourceContext referring to a Gerrit project."],["GetBreakpointResponse","Response for getting breakpoint information."],["GitSourceContext","A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub)."],["JsonServerError","A utility type which can decode a server response that indicates error"],["ListActiveBreakpointsResponse","Response for listing active breakpoints."],["ListBreakpointsResponse","Response for listing breakpoints."],["ListDebuggeesResponse","Response for listing debuggees."],["MethodInfo","Contains information about an API request."],["MultiPartReader","Provides a `Read` interface that converts multiple parts into the protocol identified by RFC2387. Note: This implementation is just as rich as it needs to be to perform uploads to google APIs, and might not be a fully-featured implementation."],["ProjectRepoId","Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project."],["RangeResponseHeader",""],["RegisterDebuggeeRequest","Request to register a debuggee."],["RegisterDebuggeeResponse","Response for registering a debuggee."],["RepoId","A unique identifier for a cloud repo."],["ResumableUploadHelper","A utility type to perform a resumable upload from start to end."],["ServerError",""],["ServerMessage",""],["SetBreakpointResponse","Response for setting a breakpoint."],["SourceContext","A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory."],["SourceLocation","Represents a location in the source code."],["StackFrame","Represents a stack frame context."],["StatusMessage","Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`."],["UpdateActiveBreakpointRequest","Request to update an active breakpoint."],["UpdateActiveBreakpointResponse","Response for updating an active breakpoint. The message is defined to allow future extensions."],["Variable","Represents a variable or an argument possibly of a compound object type. Note how the following variables are represented:"],["XUploadContentType","The `X-Upload-Content-Type` header."]],"trait":[["CallBuilder","Identifies types which represent builders for a particular resource method"],["Delegate","A trait specifying functionality to help controlling any request performed by the API. The trait has a conservative default implementation."],["Hub","Identifies the Hub. There is only one per library, this trait is supposed to make intended use more explicit. The hub allows to access all resource methods more easily."],["MethodsBuilder","Identifies types for building methods of a particular resource type"],["NestedType","Identifies types which are only used by other types internally. They have no special meaning, this trait just marks them for completeness."],["Part","Identifies types which are only used as part of other types, which usually are carrying the `Resource` trait."],["ReadSeek","A utility to specify reader types which provide seeking capabilities too"],["RequestValue","Identifies types which are used in API requests."],["Resource","Identifies types which can be inserted and deleted. Types with this trait are most commonly used by clients of this API."],["ResponseResult","Identifies types which are used in API responses."],["ToParts","A trait for all types that can convert themselves into a parts string"],["UnusedType","Identifies types which are not actually used by the API This might be a bug within the google API schema."]],"type":[["Result","A universal result type used as return for all calls."]]});