initSidebarItems({"enum":[["Error",""],["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"fn":[["remove_json_null_values",""]],"struct":[["ApiConfigHandler","API Serving configuration for Cloud Endpoints."],["ApiEndpointHandler","Use Google Cloud Endpoints to handle requests."],["AppGetCall","Gets information about an application."],["AppMethods","A builder providing access to all methods supported on *app* resources. It is not used directly, but through the `Appengine` hub."],["AppModuleDeleteCall","Deletes a module and all enclosed versions."],["AppModuleGetCall","Gets the current configuration of the module."],["AppModuleListCall","Lists all the modules in the application."],["AppModulePatchCall","Updates the configuration of the specified module."],["AppModuleVersionCreateCall","Deploys new code and resource files to a version."],["AppModuleVersionDeleteCall","Deletes an existing version."],["AppModuleVersionGetCall","Gets application deployment information."],["AppModuleVersionListCall","Lists the versions of a module."],["AppModuleVersionPatchCall","Updates an existing version. Note: UNIMPLEMENTED."],["AppOperationGetCall","Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."],["AppOperationListCall","Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding below allows API services to override the binding to use different resource name schemes, such as `users/*/operations`."],["Appengine","Central instance to access all Appengine related resource activities"],["Application","An Application contains the top-level configuration of an App Engine application."],["AutomaticScaling","Automatic scaling is the scaling policy that App Engine has used since its inception. It is based on request rate, response latencies, and other application metrics."],["BasicScaling","A module with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity."],["ContainerInfo","A Docker (container) image which should be used to start the application."],["CpuUtilization","Target scaling by CPU usage."],["DefaultDelegate","A delegate with a conservative default implementation, which is used if no other delegate is set."],["Deployment","Code and application artifacts used to deploy a version to App Engine."],["DiskUtilization","Target scaling by disk usage (for VM runtimes only)."],["ErrorHandler","A custom static error page to be served when an error occurs."],["ErrorResponse","A utility to represent detailed errors we might see in case there are BadRequests. The latter happen if the sent parameters or request structures are unsound"],["FileInfo","A single source file which is part of the application to be deployed."],["HealthCheck","Configure health checking for the VM instances. Unhealthy VM instances will be killed and replaced with new instances."],["Library","A Python runtime third-party library required by the application."],["ListModulesResponse","Response message for `Modules.ListModules`."],["ListOperationsResponse","The response message for Operations.ListOperations."],["ListVersionsResponse","Response message for `Versions.ListVersions`."],["ManualScaling","A module with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time."],["MethodInfo","Contains information about an API request."],["Module","A module is a component of an application that provides a single service or configuration. A module has a collection of versions that define a specific set of code used to implement the functionality of that module."],["MultiPartReader","Provides a `Read` interface that converts multiple parts into the protocol identified by RFC2387. **Note**: This implementation is just as rich as it needs to be to perform uploads to google APIs, and might not be a fully-featured implementation."],["Network","Used to specify extra network settings (for VM runtimes only)."],["NetworkUtilization","Target scaling by network usage (for VM runtimes only)."],["Operation","This resource represents a long-running operation that is the result of a network API call."],["RequestUtilization","Target scaling by request utilization (for VM runtimes only)."],["Resources","Used to specify how many machine resources an app version needs."],["ScriptHandler","Executes a script to handle the request that matches the URL pattern."],["SourceReference","A reference to a particular snapshot of the source tree used to build and deploy the application."],["StaticDirectoryHandler","Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static directory handlers make it easy to serve the entire contents of a directory as static files."],["StaticFilesHandler","Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. The error model is designed to be: - Simple to use and understand for most users - Flexible enough to meet unexpected needs # Overview The `Status` message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of google.rpc.Code, but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers *understand* and *resolve* the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package `google.rpc` which can be used for common error conditions. # Language mapping The `Status` message is the logical representation of the error model, but it is not necessarily the actual wire format. When the `Status` message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C. # Other uses The error model and the `Status` message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments. Example uses of this error model include: - Partial errors. If a service needs to return partial errors to the client, it may embed the `Status` in the normal response to indicate the partial errors. - Workflow errors. A typical workflow has multiple steps. Each step may have a `Status` message for error reporting purpose. - Batch operations. If a client uses batch request and batch response, the `Status` message should be used directly inside batch response, one for each error sub-response. - Asynchronous operations. If an API call embeds asynchronous operation results in its response, the status of those operations should be represented directly using the `Status` message. - Logging. If some API errors are stored in logs, the message `Status` could be used directly after any stripping needed for security/privacy reasons."],["TrafficSplit","Configuration for traffic splitting for versions within a single module. Traffic splitting allows traffic directed to the module to be assigned to one of several versions in a fractional way, enabling experiments and canarying new builds, for example."],["UrlDispatchRule","Rules to match an HTTP request and dispatch that request to a module."],["UrlMap","A URL pattern and description of how it should be handled. App Engine can handle URLs by executing application code, or by serving static files uploaded with the code, such as images, CSS or JavaScript."],["Version","A Version is a specific set of source code and configuration files deployed to a module."]],"trait":[["CallBuilder","Identifies types which represent builders for a particular resource method"],["Delegate","A trait specifying functionality to help controlling any request performed by the API. The trait has a conservative default implementation."],["Hub","Identifies the Hub. There is only one per library, this trait is supposed to make intended use more explicit. The hub allows to access all resource methods more easily."],["MethodsBuilder","Identifies types for building methods of a particular resource type"],["NestedType","Identifies types which are only used by other types internally. They have no special meaning, this trait just marks them for completeness."],["Part","Identifies types which are only used as part of other types, which usually are carrying the `Resource` trait."],["ReadSeek","A utility to specify reader types which provide seeking capabilities too"],["RequestValue","Identifies types which are used in API requests."],["Resource","Identifies types which can be inserted and deleted. Types with this trait are most commonly used by clients of this API."],["ResponseResult","Identifies types which are used in API responses."],["ToParts","A trait for all types that can convert themselves into a *parts* string"]],"type":[["Result","A universal result type used as return for all calls."]]});