{
    "docs": [
        {
            "location": "/", 
            "text": "The \ncommentanalyzer1-alpha1\n command-line interface \n(CLI)\n allows to use most features of the \nGoogle Comment Analyzer\n service from the comfort of your terminal.\n\n\nBy default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's\ncapabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero.\n\n\nIf data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools.\n\n\nEverything else about the \nComment Analyzer\n API can be found at the\n\nofficial documentation site\n.\n\n\nInstallation and Source Code\n\n\nInstall the command-line interface with cargo using:\n\n\ncargo install google-commentanalyzer1_alpha1-cli\n\n\n\n\nFind the source code \non github\n.\n\n\nUsage\n\n\nThis documentation was generated from the \nComment Analyzer\n API at revision \n20190616\n. The CLI is at version \n1.0.10\n.\n\n\ncommentanalyzer1-alpha1 [options]\n        comments\n                analyze (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                suggestscore (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n  commentanalyzer1-alpha1 --help\n\nConfiguration:\n  [--scope \nurl\n]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir \nfolder\n\n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.\n\n\n\n\n\nConfiguration\n\n\nThe program will store all persistent data in the \n~/.google-service-cli\n directory in \nJSON\n files prefixed with \ncommentanalyzer1-alpha1-\n.  You can change the directory used to store configuration with the \n--config-dir\n flag on a per-invocation basis.\n\n\nMore information about the various kinds of persistent data are given in the following paragraphs.\n\n\nAuthentication\n\n\nMost APIs require a user to authenticate any request. If this is the case, the \nscope\n determines the \nset of permissions granted. The granularity of these is usually no more than \nread-only\n or \nfull-access\n.\n\n\nIf not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the \n--scope\n flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.\n\n\nThe first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.\n\n\nIf a scope was authenticated by the user, the respective information will be stored as \nJSON\n in the configuration\ndirectory, e.g. \n~/.google-service-cli/commentanalyzer1-alpha1-token-\nscope-hash\n.json\n. No manual management of these tokens\nis necessary.\n\n\nTo revoke granted authentication, please refer to the \nofficial documentation\n.\n\n\nApplication Secrets\n\n\nIn order to allow any application to use Google services, it will need to be registered using the \n\nGoogle Developer Console\n. APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.\n\n\nTo allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.\n\n\nYou can workaround this limitation by putting your own secrets file at this location: \n\n~/.google-service-cli/commentanalyzer1-alpha1-secret.json\n, assuming that the required \ncommentanalyzer\n API \nwas enabled for it. Such a secret file can be downloaded in the \nGoogle Developer Console\n at \n\nAPIs \n auth -\n Credentials -\n Download JSON\n and used as is.\n\n\nLearn more about how to setup Google projects and enable APIs using the \nofficial documentation\n.\n\n\nDebugging\n\n\nEven though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error \nas-is\n.\n\n\nThe \n--debug\n flag will print all client-server communication to standard error, whereas the \n--debug-auth\n flag\nwill cause all communication related to authentication to standard error.\nIf the \n--debug\n flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.\n\n\nYou may consider redirecting standard error into a file for ease of use, e.g. \ncommentanalyzer1-alpha1 --debug \nresource\n \nmethod\n [options] 2\ndebug.txt\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#installation-and-source-code", 
            "text": "Install the command-line interface with cargo using:  cargo install google-commentanalyzer1_alpha1-cli  Find the source code  on github .", 
            "title": "Installation and Source Code"
        }, 
        {
            "location": "/#usage", 
            "text": "This documentation was generated from the  Comment Analyzer  API at revision  20190616 . The CLI is at version  1.0.10 .  commentanalyzer1-alpha1 [options]\n        comments\n                analyze (-r  kv )... [-p  v ]... [-o  out ]\n                suggestscore (-r  kv )... [-p  v ]... [-o  out ]\n  commentanalyzer1-alpha1 --help\n\nConfiguration:\n  [--scope  url ]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir  folder \n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.", 
            "title": "Usage"
        }, 
        {
            "location": "/#configuration", 
            "text": "The program will store all persistent data in the  ~/.google-service-cli  directory in  JSON  files prefixed with  commentanalyzer1-alpha1- .  You can change the directory used to store configuration with the  --config-dir  flag on a per-invocation basis.  More information about the various kinds of persistent data are given in the following paragraphs.", 
            "title": "Configuration"
        }, 
        {
            "location": "/#authentication", 
            "text": "Most APIs require a user to authenticate any request. If this is the case, the  scope  determines the \nset of permissions granted. The granularity of these is usually no more than  read-only  or  full-access .  If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the  --scope  flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.  The first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.  If a scope was authenticated by the user, the respective information will be stored as  JSON  in the configuration\ndirectory, e.g.  ~/.google-service-cli/commentanalyzer1-alpha1-token- scope-hash .json . No manual management of these tokens\nis necessary.  To revoke granted authentication, please refer to the  official documentation .", 
            "title": "Authentication"
        }, 
        {
            "location": "/#application-secrets", 
            "text": "In order to allow any application to use Google services, it will need to be registered using the  Google Developer Console . APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.  To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.  You can workaround this limitation by putting your own secrets file at this location:  ~/.google-service-cli/commentanalyzer1-alpha1-secret.json , assuming that the required  commentanalyzer  API \nwas enabled for it. Such a secret file can be downloaded in the  Google Developer Console  at  APIs   auth -  Credentials -  Download JSON  and used as is.  Learn more about how to setup Google projects and enable APIs using the  official documentation .", 
            "title": "Application Secrets"
        }, 
        {
            "location": "/#debugging", 
            "text": "Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error  as-is .  The  --debug  flag will print all client-server communication to standard error, whereas the  --debug-auth  flag\nwill cause all communication related to authentication to standard error.\nIf the  --debug  flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.  You may consider redirecting standard error into a file for ease of use, e.g.  commentanalyzer1-alpha1 --debug  resource   method  [options] 2 debug.txt .", 
            "title": "Debugging"
        }, 
        {
            "location": "/comments_analyze/", 
            "text": "Analyzes the provided text and returns scores for requested attributes.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userinfo.email\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userinfo.email\n.\nYou can set the scope for this method like this: \ncommentanalyzer1-alpha1 --scope \nscope\n comments analyze ...\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nAnalyzeCommentRequest:\n  client-token: string\n  comment:\n    text: string\n    type: string\n  community-id: string\n  context:\n    article-and-parent-comment:\n      article:\n        text: string\n        type: string\n      parent-comment:\n        text: string\n        type: string\n  do-not-store: boolean\n  languages: [string]\n  session-id: string\n  span-annotations: boolean\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    client-token=eirmod\n\n\nOpaque token that is echoed from the request to the response.\n\n\n\n\n\n\ncomment    text=sit\n\n\nUTF-8 encoded text.\n\n\n\n\n\n\n\n\ntype=stet\n\n\n\n\nType of the text field.\n\n\n\n\n\n\n\n\n..    community-id=sed\n\n\n\n\nOptional identifier associating this AnalyzeCommentRequest with a\n    particular client\ns community. Different communities may have different\n    norms and rules. Specifying this value enables us to explore building\n    community-specific models for clients.\n\n\n\n\n\n\ncontext.article-and-parent-comment.article    text=et\n\n\nUTF-8 encoded text.\n\n\n\n\n\n\n\n\ntype=dolores\n\n\n\n\nType of the text field.\n\n\n\n\n\n\n\n\n..parent-comment    text=kasd\n\n\n\n\nUTF-8 encoded text.\n\n\n\n\n\n\n\n\ntype=accusam\n\n\n\n\nType of the text field.\n\n\n\n\n\n\n\n\n....    do-not-store=true\n\n\n\n\nDo not store the comment or context sent in this request. By default, the\n    service may store comments/context for debugging purposes.\n\n\n\n\n\n\nlanguages=justo\n\n\nThe language(s) of the comment and context (if none are specified, the\n    language is automatically detected). If multiple languages are specified,\n    the text is checked in all of them that are supported. Both ISO and BCP-47\n    language codes are accepted.\n    Current Language Restrictions:\n\n\nOnly English text (\nen\n) is supported.\nIf none of the languages specified by the caller are supported, an\n\nUNIMPLEMENTED\n error is returned.\n\n\n\n\n\n\nEach invocation of this argument appends the given value to the array.\n\n\n\n\n\n\nsession-id=amet.\n\n\nSession ID. Used to join related RPCs into a single session. For example,\n    an interactive tool that calls both the AnalyzeComment and\n    SuggestCommentScore RPCs should set all invocations of both RPCs to the\n    same Session ID, typically a random 64-bit integer.\n\n\n\n\n\n\nspan-annotations=false\n\n\nAn advisory parameter that will return span annotations if the model\n    is capable of providing scores with sub-comment resolution. This will\n    likely increase the size of the returned message.\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Analyze"
        }, 
        {
            "location": "/comments_analyze/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userinfo.email  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userinfo.email .\nYou can set the scope for this method like this:  commentanalyzer1-alpha1 --scope  scope  comments analyze ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/comments_analyze/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  AnalyzeCommentRequest:\n  client-token: string\n  comment:\n    text: string\n    type: string\n  community-id: string\n  context:\n    article-and-parent-comment:\n      article:\n        text: string\n        type: string\n      parent-comment:\n        text: string\n        type: string\n  do-not-store: boolean\n  languages: [string]\n  session-id: string\n  span-annotations: boolean  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    client-token=eirmod  Opaque token that is echoed from the request to the response.    comment    text=sit  UTF-8 encoded text.     type=stet   Type of the text field.     ..    community-id=sed   Optional identifier associating this AnalyzeCommentRequest with a\n    particular client s community. Different communities may have different\n    norms and rules. Specifying this value enables us to explore building\n    community-specific models for clients.    context.article-and-parent-comment.article    text=et  UTF-8 encoded text.     type=dolores   Type of the text field.     ..parent-comment    text=kasd   UTF-8 encoded text.     type=accusam   Type of the text field.     ....    do-not-store=true   Do not store the comment or context sent in this request. By default, the\n    service may store comments/context for debugging purposes.    languages=justo  The language(s) of the comment and context (if none are specified, the\n    language is automatically detected). If multiple languages are specified,\n    the text is checked in all of them that are supported. Both ISO and BCP-47\n    language codes are accepted.\n    Current Language Restrictions:  Only English text ( en ) is supported.\nIf none of the languages specified by the caller are supported, an UNIMPLEMENTED  error is returned.    Each invocation of this argument appends the given value to the array.    session-id=amet.  Session ID. Used to join related RPCs into a single session. For example,\n    an interactive tool that calls both the AnalyzeComment and\n    SuggestCommentScore RPCs should set all invocations of both RPCs to the\n    same Session ID, typically a random 64-bit integer.    span-annotations=false  An advisory parameter that will return span annotations if the model\n    is capable of providing scores with sub-comment resolution. This will\n    likely increase the size of the returned message.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/comments_analyze/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/comments_analyze/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/comments_analyze/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/comments_suggestscore/", 
            "text": "Suggest comment scores as training data.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/userinfo.email\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/userinfo.email\n.\nYou can set the scope for this method like this: \ncommentanalyzer1-alpha1 --scope \nscope\n comments suggestscore ...\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nSuggestCommentScoreRequest:\n  client-token: string\n  comment:\n    text: string\n    type: string\n  community-id: string\n  context:\n    article-and-parent-comment:\n      article:\n        text: string\n        type: string\n      parent-comment:\n        text: string\n        type: string\n  languages: [string]\n  session-id: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    client-token=labore\n\n\nOpaque token that is echoed from the request to the response.\n\n\n\n\n\n\ncomment    text=sea\n\n\nUTF-8 encoded text.\n\n\n\n\n\n\n\n\ntype=nonumy\n\n\n\n\nType of the text field.\n\n\n\n\n\n\n\n\n..    community-id=dolores\n\n\n\n\nOptional identifier associating this comment score suggestion with a\n    particular sub-community. Different communities may have different norms\n    and rules. Specifying this value enables training community-specific\n    models.\n\n\n\n\n\n\ncontext.article-and-parent-comment.article    text=gubergren\n\n\nUTF-8 encoded text.\n\n\n\n\n\n\n\n\ntype=sadipscing\n\n\n\n\nType of the text field.\n\n\n\n\n\n\n\n\n..parent-comment    text=aliquyam\n\n\n\n\nUTF-8 encoded text.\n\n\n\n\n\n\n\n\ntype=ea\n\n\n\n\nType of the text field.\n\n\n\n\n\n\n\n\n....    languages=no\n\n\n\n\nThe language(s) of the comment and context (if none are specified, the\n    language is automatically detected). If multiple languages are specified,\n    the text is checked in all of them that are supported. Both ISO and BCP-47\n    language codes are accepted.\n    Current Language Restrictions:\n\n\nOnly English text (\nen\n) is supported.\nIf none of the languages specified by the caller are supported, an\n\nUNIMPLEMENTED\n error is returned.\n\n\n\n\n\n\nEach invocation of this argument appends the given value to the array.\n\n\n\n\n\n\nsession-id=justo\n\n\nSession ID. Used to join related RPCs into a single session. For example,\n    an interactive tool that calls both the AnalyzeComment and\n    SuggestCommentScore RPCs should set all invocations of both RPCs to the\n    same Session ID, typically a random 64-bit integer.\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Suggestscore"
        }, 
        {
            "location": "/comments_suggestscore/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/userinfo.email  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/userinfo.email .\nYou can set the scope for this method like this:  commentanalyzer1-alpha1 --scope  scope  comments suggestscore ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/comments_suggestscore/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  SuggestCommentScoreRequest:\n  client-token: string\n  comment:\n    text: string\n    type: string\n  community-id: string\n  context:\n    article-and-parent-comment:\n      article:\n        text: string\n        type: string\n      parent-comment:\n        text: string\n        type: string\n  languages: [string]\n  session-id: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    client-token=labore  Opaque token that is echoed from the request to the response.    comment    text=sea  UTF-8 encoded text.     type=nonumy   Type of the text field.     ..    community-id=dolores   Optional identifier associating this comment score suggestion with a\n    particular sub-community. Different communities may have different norms\n    and rules. Specifying this value enables training community-specific\n    models.    context.article-and-parent-comment.article    text=gubergren  UTF-8 encoded text.     type=sadipscing   Type of the text field.     ..parent-comment    text=aliquyam   UTF-8 encoded text.     type=ea   Type of the text field.     ....    languages=no   The language(s) of the comment and context (if none are specified, the\n    language is automatically detected). If multiple languages are specified,\n    the text is checked in all of them that are supported. Both ISO and BCP-47\n    language codes are accepted.\n    Current Language Restrictions:  Only English text ( en ) is supported.\nIf none of the languages specified by the caller are supported, an UNIMPLEMENTED  error is returned.    Each invocation of this argument appends the given value to the array.    session-id=justo  Session ID. Used to join related RPCs into a single session. For example,\n    an interactive tool that calls both the AnalyzeComment and\n    SuggestCommentScore RPCs should set all invocations of both RPCs to the\n    same Session ID, typically a random 64-bit integer.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/comments_suggestscore/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/comments_suggestscore/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/comments_suggestscore/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }
    ]
}