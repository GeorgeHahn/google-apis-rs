{
    "docs": [
        {
            "location": "/", 
            "text": "The \niamcredentials1\n command-line interface \n(CLI)\n allows to use most features of the \nGoogle IAM Credentials\n service from the comfort of your terminal.\n\n\nBy default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's\ncapabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero.\n\n\nIf data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools.\n\n\nEverything else about the \nIAM Credentials\n API can be found at the\n\nofficial documentation site\n.\n\n\nInstallation and Source Code\n\n\nInstall the command-line interface with cargo using:\n\n\ncargo install google-iamcredentials1-cli\n\n\n\n\nFind the source code \non github\n.\n\n\nUsage\n\n\nThis documentation was generated from the \nIAM Credentials\n API at revision \n20181004\n. The CLI is at version \n1.0.8\n.\n\n\niamcredentials1 [options]\n        projects\n                service-accounts-generate-access-token \nname\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                service-accounts-generate-id-token \nname\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                service-accounts-generate-identity-binding-access-token \nname\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                service-accounts-sign-blob \nname\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                service-accounts-sign-jwt \nname\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n  iamcredentials1 --help\n\nConfiguration:\n  [--scope \nurl\n]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir \nfolder\n\n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.\n\n\n\n\n\nConfiguration\n\n\nThe program will store all persistent data in the \n~/.google-service-cli\n directory in \nJSON\n files prefixed with \niamcredentials1-\n.  You can change the directory used to store configuration with the \n--config-dir\n flag on a per-invocation basis.\n\n\nMore information about the various kinds of persistent data are given in the following paragraphs.\n\n\nAuthentication\n\n\nMost APIs require a user to authenticate any request. If this is the case, the \nscope\n determines the \nset of permissions granted. The granularity of these is usually no more than \nread-only\n or \nfull-access\n.\n\n\nIf not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the \n--scope\n flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.\n\n\nThe first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.\n\n\nIf a scope was authenticated by the user, the respective information will be stored as \nJSON\n in the configuration\ndirectory, e.g. \n~/.google-service-cli/iamcredentials1-token-\nscope-hash\n.json\n. No manual management of these tokens\nis necessary.\n\n\nTo revoke granted authentication, please refer to the \nofficial documentation\n.\n\n\nApplication Secrets\n\n\nIn order to allow any application to use Google services, it will need to be registered using the \n\nGoogle Developer Console\n. APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.\n\n\nTo allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.\n\n\nYou can workaround this limitation by putting your own secrets file at this location: \n\n~/.google-service-cli/iamcredentials1-secret.json\n, assuming that the required \niamcredentials\n API \nwas enabled for it. Such a secret file can be downloaded in the \nGoogle Developer Console\n at \n\nAPIs \n auth -\n Credentials -\n Download JSON\n and used as is.\n\n\nLearn more about how to setup Google projects and enable APIs using the \nofficial documentation\n.\n\n\nDebugging\n\n\nEven though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error \nas-is\n.\n\n\nThe \n--debug\n flag will print all client-server communication to standard error, whereas the \n--debug-auth\n flag\nwill cause all communication related to authentication to standard error.\nIf the \n--debug\n flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.\n\n\nYou may consider redirecting standard error into a file for ease of use, e.g. \niamcredentials1 --debug \nresource\n \nmethod\n [options] 2\ndebug.txt\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#installation-and-source-code", 
            "text": "Install the command-line interface with cargo using:  cargo install google-iamcredentials1-cli  Find the source code  on github .", 
            "title": "Installation and Source Code"
        }, 
        {
            "location": "/#usage", 
            "text": "This documentation was generated from the  IAM Credentials  API at revision  20181004 . The CLI is at version  1.0.8 .  iamcredentials1 [options]\n        projects\n                service-accounts-generate-access-token  name  (-r  kv )... [-p  v ]... [-o  out ]\n                service-accounts-generate-id-token  name  (-r  kv )... [-p  v ]... [-o  out ]\n                service-accounts-generate-identity-binding-access-token  name  (-r  kv )... [-p  v ]... [-o  out ]\n                service-accounts-sign-blob  name  (-r  kv )... [-p  v ]... [-o  out ]\n                service-accounts-sign-jwt  name  (-r  kv )... [-p  v ]... [-o  out ]\n  iamcredentials1 --help\n\nConfiguration:\n  [--scope  url ]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir  folder \n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.", 
            "title": "Usage"
        }, 
        {
            "location": "/#configuration", 
            "text": "The program will store all persistent data in the  ~/.google-service-cli  directory in  JSON  files prefixed with  iamcredentials1- .  You can change the directory used to store configuration with the  --config-dir  flag on a per-invocation basis.  More information about the various kinds of persistent data are given in the following paragraphs.", 
            "title": "Configuration"
        }, 
        {
            "location": "/#authentication", 
            "text": "Most APIs require a user to authenticate any request. If this is the case, the  scope  determines the \nset of permissions granted. The granularity of these is usually no more than  read-only  or  full-access .  If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the  --scope  flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.  The first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.  If a scope was authenticated by the user, the respective information will be stored as  JSON  in the configuration\ndirectory, e.g.  ~/.google-service-cli/iamcredentials1-token- scope-hash .json . No manual management of these tokens\nis necessary.  To revoke granted authentication, please refer to the  official documentation .", 
            "title": "Authentication"
        }, 
        {
            "location": "/#application-secrets", 
            "text": "In order to allow any application to use Google services, it will need to be registered using the  Google Developer Console . APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.  To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.  You can workaround this limitation by putting your own secrets file at this location:  ~/.google-service-cli/iamcredentials1-secret.json , assuming that the required  iamcredentials  API \nwas enabled for it. Such a secret file can be downloaded in the  Google Developer Console  at  APIs   auth -  Credentials -  Download JSON  and used as is.  Learn more about how to setup Google projects and enable APIs using the  official documentation .", 
            "title": "Application Secrets"
        }, 
        {
            "location": "/#debugging", 
            "text": "Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error  as-is .  The  --debug  flag will print all client-server communication to standard error, whereas the  --debug-auth  flag\nwill cause all communication related to authentication to standard error.\nIf the  --debug  flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.  You may consider redirecting standard error into a file for ease of use, e.g.  iamcredentials1 --debug  resource   method  [options] 2 debug.txt .", 
            "title": "Debugging"
        }, 
        {
            "location": "/projects_service-accounts-generate-access-token/", 
            "text": "Generates an OAuth 2.0 access token for a service account.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/cloud-platform\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \niamcredentials1 --scope \nscope\n projects service-accounts-generate-access-token ...\n\n\nRequired Scalar Argument\n\n\n\n\nname\n \n(string)\n\n\nThe resource name of the service account for which the credentials\n    are requested, in the following format:\n    \nprojects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}\n.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nGenerateAccessTokenRequest:\n  delegates: [string]\n  lifetime: string\n  scope: [string]\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    delegates=eirmod\n\n\n\n\nThe sequence of service accounts in a delegation chain. Each service\n    account must be granted the \nroles/iam.serviceAccountTokenCreator\n role\n    on its next service account in the chain. The last service account in the\n    chain must be granted the \nroles/iam.serviceAccountTokenCreator\n role\n    on the service account that is specified in the \nname\n field of the\n    request.\n\n\nThe delegates must have the following format:\n\nprojects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}\n\n    - Each invocation of this argument appends the given value to the array.\n\n \nlifetime=sit\n\n    - The desired lifetime duration of the access token in seconds.\nMust be set to a value less than or equal to 3600 (1 hour). If a value is\nnot specified, the token\ns lifetime will be set to a default value of one\nhour.\n\n \nscope=stet\n\n    - Code to identify the scopes to be included in the OAuth 2.0 access token.\nSee https://developers.google.com/identity/protocols/googlescopes for more\ninformation.\nAt least one value required.\n    - Each invocation of this argument appends the given value to the array.\n\n\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Service Accounts Generate Access Token"
        }, 
        {
            "location": "/projects_service-accounts-generate-access-token/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/cloud-platform  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  iamcredentials1 --scope  scope  projects service-accounts-generate-access-token ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/projects_service-accounts-generate-access-token/#required-scalar-argument", 
            "text": "name   (string)  The resource name of the service account for which the credentials\n    are requested, in the following format:\n     projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID} .", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/projects_service-accounts-generate-access-token/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  GenerateAccessTokenRequest:\n  delegates: [string]\n  lifetime: string\n  scope: [string]  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    delegates=eirmod   The sequence of service accounts in a delegation chain. Each service\n    account must be granted the  roles/iam.serviceAccountTokenCreator  role\n    on its next service account in the chain. The last service account in the\n    chain must be granted the  roles/iam.serviceAccountTokenCreator  role\n    on the service account that is specified in the  name  field of the\n    request.  The delegates must have the following format: projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID} \n    - Each invocation of this argument appends the given value to the array.   lifetime=sit \n    - The desired lifetime duration of the access token in seconds.\nMust be set to a value less than or equal to 3600 (1 hour). If a value is\nnot specified, the token s lifetime will be set to a default value of one\nhour.   scope=stet \n    - Code to identify the scopes to be included in the OAuth 2.0 access token.\nSee https://developers.google.com/identity/protocols/googlescopes for more\ninformation.\nAt least one value required.\n    - Each invocation of this argument appends the given value to the array.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/projects_service-accounts-generate-access-token/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/projects_service-accounts-generate-access-token/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/projects_service-accounts-generate-access-token/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/projects_service-accounts-generate-id-token/", 
            "text": "Generates an OpenID Connect ID token for a service account.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/cloud-platform\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \niamcredentials1 --scope \nscope\n projects service-accounts-generate-id-token ...\n\n\nRequired Scalar Argument\n\n\n\n\nname\n \n(string)\n\n\nThe resource name of the service account for which the credentials\n    are requested, in the following format:\n    \nprojects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}\n.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nGenerateIdTokenRequest:\n  audience: string\n  delegates: [string]\n  include-email: boolean\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    audience=sed\n\n\nThe audience for the token, such as the API or account that this token\n    grants access to.\n\n\n\n\n\n\ndelegates=et\n\n\n\n\nThe sequence of service accounts in a delegation chain. Each service\n    account must be granted the \nroles/iam.serviceAccountTokenCreator\n role\n    on its next service account in the chain. The last service account in the\n    chain must be granted the \nroles/iam.serviceAccountTokenCreator\n role\n    on the service account that is specified in the \nname\n field of the\n    request.\n\n\nThe delegates must have the following format:\n\nprojects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}\n\n    - Each invocation of this argument appends the given value to the array.\n* \ninclude-email=true\n\n    - Include the service account email in the token. If set to \ntrue\n, the\ntoken will contain \nemail\n and \nemail_verified\n claims.\n\n\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Service Accounts Generate Id Token"
        }, 
        {
            "location": "/projects_service-accounts-generate-id-token/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/cloud-platform  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  iamcredentials1 --scope  scope  projects service-accounts-generate-id-token ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/projects_service-accounts-generate-id-token/#required-scalar-argument", 
            "text": "name   (string)  The resource name of the service account for which the credentials\n    are requested, in the following format:\n     projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID} .", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/projects_service-accounts-generate-id-token/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  GenerateIdTokenRequest:\n  audience: string\n  delegates: [string]\n  include-email: boolean  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    audience=sed  The audience for the token, such as the API or account that this token\n    grants access to.    delegates=et   The sequence of service accounts in a delegation chain. Each service\n    account must be granted the  roles/iam.serviceAccountTokenCreator  role\n    on its next service account in the chain. The last service account in the\n    chain must be granted the  roles/iam.serviceAccountTokenCreator  role\n    on the service account that is specified in the  name  field of the\n    request.  The delegates must have the following format: projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID} \n    - Each invocation of this argument appends the given value to the array.\n*  include-email=true \n    - Include the service account email in the token. If set to  true , the\ntoken will contain  email  and  email_verified  claims.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/projects_service-accounts-generate-id-token/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/projects_service-accounts-generate-id-token/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/projects_service-accounts-generate-id-token/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/projects_service-accounts-generate-identity-binding-access-token/", 
            "text": "Required Scalar Argument\n\n\n\n\nname\n \n(string)\n\n\nThe resource name of the service account for which the credentials\n    are requested, in the following format:\n    \nprojects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}\n.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nGenerateIdentityBindingAccessTokenRequest:\n  jwt: string\n  scope: [string]\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    jwt=kasd\n\n\n\n\nRequired. Input token.\n    Must be in JWT format according to\n    RFC7523 (https://tools.ietf.org/html/rfc7523)\n    and must have \nkid\n field in the header.\n    Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).\n    Mandatory payload fields (along the lines of RFC 7523, section 3):\n\n\n\n\niss: issuer of the token. Must provide a discovery document at\n       $iss/.well-known/openid-configuration . The document needs to be\n       formatted according to section 4.2 of the OpenID Connect Discovery\n       1.0 specification.\n\n\niat: Issue time in seconds since epoch. Must be in the past.\n\n\nexp: Expiration time in seconds since epoch. Must be less than 48 hours\n       after iat. We recommend to create tokens that last shorter than 6\n       hours to improve security unless business reasons mandate longer\n       expiration times. Shorter token lifetimes are generally more secure\n       since tokens that have been exfiltrated by attackers can be used for\n       a shorter time. you can configure the maximum lifetime of the\n       incoming token in the configuration of the mapper.\n       The resulting Google token will expire within an hour or at \nexp\n,\n       whichever is earlier.\n\n\nsub: JWT subject, identity asserted in the JWT.\n\n\naud: Configured in the mapper policy. By default the service account\n       email.\n\n\n\n\nClaims from the incoming token can be transferred into the output token\naccoding to the mapper configuration. The outgoing claim size is limited.\nOutgoing claims size must be less than 4kB serialized as JSON without\nwhitespace.\n\n\nExample header:\n{\n  \nalg\n: \nRS256\n,\n  \nkid\n: \n92a4265e14ab04d4d228a48d10d4ca31610936f8\n\n}\nExample payload:\n{\n  \niss\n: \nhttps://accounts.google.com\n,\n  \niat\n: 1517963104,\n  \nexp\n: 1517966704,\n  \naud\n: \nhttps://iamcredentials.googleapis.com/google.iam.credentials.v1.CloudGaia\n,\n  \nsub\n: \n113475438248934895348\n,\n  \nmy_claims\n: {\n    \nadditional_claim\n: \nvalue\n\n  }\n}\n* \nscope=accusam\n\n    - Code to identify the scopes to be included in the OAuth 2.0 access token.\nSee https://developers.google.com/identity/protocols/googlescopes for more\ninformation.\nAt least one value required.\n    - Each invocation of this argument appends the given value to the array.\n\n\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Service Accounts Generate Identity Binding Access Token"
        }, 
        {
            "location": "/projects_service-accounts-generate-identity-binding-access-token/#required-scalar-argument", 
            "text": "name   (string)  The resource name of the service account for which the credentials\n    are requested, in the following format:\n     projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID} .", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/projects_service-accounts-generate-identity-binding-access-token/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  GenerateIdentityBindingAccessTokenRequest:\n  jwt: string\n  scope: [string]  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    jwt=kasd   Required. Input token.\n    Must be in JWT format according to\n    RFC7523 (https://tools.ietf.org/html/rfc7523)\n    and must have  kid  field in the header.\n    Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).\n    Mandatory payload fields (along the lines of RFC 7523, section 3):   iss: issuer of the token. Must provide a discovery document at\n       $iss/.well-known/openid-configuration . The document needs to be\n       formatted according to section 4.2 of the OpenID Connect Discovery\n       1.0 specification.  iat: Issue time in seconds since epoch. Must be in the past.  exp: Expiration time in seconds since epoch. Must be less than 48 hours\n       after iat. We recommend to create tokens that last shorter than 6\n       hours to improve security unless business reasons mandate longer\n       expiration times. Shorter token lifetimes are generally more secure\n       since tokens that have been exfiltrated by attackers can be used for\n       a shorter time. you can configure the maximum lifetime of the\n       incoming token in the configuration of the mapper.\n       The resulting Google token will expire within an hour or at  exp ,\n       whichever is earlier.  sub: JWT subject, identity asserted in the JWT.  aud: Configured in the mapper policy. By default the service account\n       email.   Claims from the incoming token can be transferred into the output token\naccoding to the mapper configuration. The outgoing claim size is limited.\nOutgoing claims size must be less than 4kB serialized as JSON without\nwhitespace.  Example header:\n{\n   alg :  RS256 ,\n   kid :  92a4265e14ab04d4d228a48d10d4ca31610936f8 \n}\nExample payload:\n{\n   iss :  https://accounts.google.com ,\n   iat : 1517963104,\n   exp : 1517966704,\n   aud :  https://iamcredentials.googleapis.com/google.iam.credentials.v1.CloudGaia ,\n   sub :  113475438248934895348 ,\n   my_claims : {\n     additional_claim :  value \n  }\n}\n*  scope=accusam \n    - Code to identify the scopes to be included in the OAuth 2.0 access token.\nSee https://developers.google.com/identity/protocols/googlescopes for more\ninformation.\nAt least one value required.\n    - Each invocation of this argument appends the given value to the array.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/projects_service-accounts-generate-identity-binding-access-token/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/projects_service-accounts-generate-identity-binding-access-token/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/projects_service-accounts-generate-identity-binding-access-token/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/projects_service-accounts-sign-blob/", 
            "text": "Signs a blob using a service account\ns system-managed private key.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/cloud-platform\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \niamcredentials1 --scope \nscope\n projects service-accounts-sign-blob ...\n\n\nRequired Scalar Argument\n\n\n\n\nname\n \n(string)\n\n\nThe resource name of the service account for which the credentials\n    are requested, in the following format:\n    \nprojects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}\n.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nSignBlobRequest:\n  delegates: [string]\n  payload: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    delegates=takimata\n\n\n\n\nThe sequence of service accounts in a delegation chain. Each service\n    account must be granted the \nroles/iam.serviceAccountTokenCreator\n role\n    on its next service account in the chain. The last service account in the\n    chain must be granted the \nroles/iam.serviceAccountTokenCreator\n role\n    on the service account that is specified in the \nname\n field of the\n    request.\n\n\nThe delegates must have the following format:\n\nprojects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}\n\n    - Each invocation of this argument appends the given value to the array.\n* \npayload=justo\n\n    - The bytes to sign.\n\n\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Service Accounts Sign Blob"
        }, 
        {
            "location": "/projects_service-accounts-sign-blob/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/cloud-platform  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  iamcredentials1 --scope  scope  projects service-accounts-sign-blob ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/projects_service-accounts-sign-blob/#required-scalar-argument", 
            "text": "name   (string)  The resource name of the service account for which the credentials\n    are requested, in the following format:\n     projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID} .", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/projects_service-accounts-sign-blob/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  SignBlobRequest:\n  delegates: [string]\n  payload: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    delegates=takimata   The sequence of service accounts in a delegation chain. Each service\n    account must be granted the  roles/iam.serviceAccountTokenCreator  role\n    on its next service account in the chain. The last service account in the\n    chain must be granted the  roles/iam.serviceAccountTokenCreator  role\n    on the service account that is specified in the  name  field of the\n    request.  The delegates must have the following format: projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID} \n    - Each invocation of this argument appends the given value to the array.\n*  payload=justo \n    - The bytes to sign.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/projects_service-accounts-sign-blob/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/projects_service-accounts-sign-blob/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/projects_service-accounts-sign-blob/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/projects_service-accounts-sign-jwt/", 
            "text": "Signs a JWT using a service account\ns system-managed private key.\n\n\nScopes\n\n\nYou will need authorization for the \nhttps://www.googleapis.com/auth/cloud-platform\n scope to make a valid call.\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \niamcredentials1 --scope \nscope\n projects service-accounts-sign-jwt ...\n\n\nRequired Scalar Argument\n\n\n\n\nname\n \n(string)\n\n\nThe resource name of the service account for which the credentials\n    are requested, in the following format:\n    \nprojects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}\n.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nSignJwtRequest:\n  delegates: [string]\n  payload: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    delegates=amet.\n\n\n\n\nThe sequence of service accounts in a delegation chain. Each service\n    account must be granted the \nroles/iam.serviceAccountTokenCreator\n role\n    on its next service account in the chain. The last service account in the\n    chain must be granted the \nroles/iam.serviceAccountTokenCreator\n role\n    on the service account that is specified in the \nname\n field of the\n    request.\n\n\nThe delegates must have the following format:\n\nprojects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}\n\n    - Each invocation of this argument appends the given value to the array.\n* \npayload=erat\n\n    - The JWT payload to sign: a JSON object that contains a JWT Claims Set.\n\n\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Service Accounts Sign Jwt"
        }, 
        {
            "location": "/projects_service-accounts-sign-jwt/#scopes", 
            "text": "You will need authorization for the  https://www.googleapis.com/auth/cloud-platform  scope to make a valid call.  If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  iamcredentials1 --scope  scope  projects service-accounts-sign-jwt ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/projects_service-accounts-sign-jwt/#required-scalar-argument", 
            "text": "name   (string)  The resource name of the service account for which the credentials\n    are requested, in the following format:\n     projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID} .", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/projects_service-accounts-sign-jwt/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  SignJwtRequest:\n  delegates: [string]\n  payload: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    delegates=amet.   The sequence of service accounts in a delegation chain. Each service\n    account must be granted the  roles/iam.serviceAccountTokenCreator  role\n    on its next service account in the chain. The last service account in the\n    chain must be granted the  roles/iam.serviceAccountTokenCreator  role\n    on the service account that is specified in the  name  field of the\n    request.  The delegates must have the following format: projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID} \n    - Each invocation of this argument appends the given value to the array.\n*  payload=erat \n    - The JWT payload to sign: a JSON object that contains a JWT Claims Set.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/projects_service-accounts-sign-jwt/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/projects_service-accounts-sign-jwt/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/projects_service-accounts-sign-jwt/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }
    ]
}