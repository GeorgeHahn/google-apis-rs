{
    "docs": [
        {
            "location": "/", 
            "text": "The \ndigitalassetlinks1\n command-line interface \n(CLI)\n allows to use most features of the \nGoogle digitalassetlinks\n service from the comfort of your terminal.\n\n\nBy default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's\ncapabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero.\n\n\nIf data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools.\n\n\nEverything else about the \ndigitalassetlinks\n API can be found at the\n\nofficial documentation site\n.\n\n\nInstallation and Source Code\n\n\nInstall the command-line interface with cargo using:\n\n\ncargo install google-digitalassetlinks1-cli\n\n\n\n\nFind the source code \non github\n.\n\n\nUsage\n\n\nThis documentation was generated from the \ndigitalassetlinks\n API at revision \n20181009\n. The CLI is at version \n1.0.8\n.\n\n\ndigitalassetlinks1 [options]\n        assetlinks\n                check [-p \nv\n]... [-o \nout\n]\n        statements\n                list [-p \nv\n]... [-o \nout\n]\n  digitalassetlinks1 --help\n\nConfiguration:\n  --config-dir \nfolder\n\n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.\n\n\n\n\n\nConfiguration\n\n\nThe program will store all persistent data in the \n~/.google-service-cli\n directory in \nJSON\n files prefixed with \ndigitalassetlinks1-\n.  You can change the directory used to store configuration with the \n--config-dir\n flag on a per-invocation basis.\n\n\nMore information about the various kinds of persistent data are given in the following paragraphs.\n\n\nAuthentication\n\n\nMost APIs require a user to authenticate any request. If this is the case, the \nscope\n determines the \nset of permissions granted. The granularity of these is usually no more than \nread-only\n or \nfull-access\n.\n\n\nIf not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the \n--scope\n flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.\n\n\nThe first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.\n\n\nIf a scope was authenticated by the user, the respective information will be stored as \nJSON\n in the configuration\ndirectory, e.g. \n~/.google-service-cli/digitalassetlinks1-token-\nscope-hash\n.json\n. No manual management of these tokens\nis necessary.\n\n\nTo revoke granted authentication, please refer to the \nofficial documentation\n.\n\n\nApplication Secrets\n\n\nIn order to allow any application to use Google services, it will need to be registered using the \n\nGoogle Developer Console\n. APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.\n\n\nTo allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.\n\n\nYou can workaround this limitation by putting your own secrets file at this location: \n\n~/.google-service-cli/digitalassetlinks1-secret.json\n, assuming that the required \ndigitalassetlinks\n API \nwas enabled for it. Such a secret file can be downloaded in the \nGoogle Developer Console\n at \n\nAPIs \n auth -\n Credentials -\n Download JSON\n and used as is.\n\n\nLearn more about how to setup Google projects and enable APIs using the \nofficial documentation\n.\n\n\nDebugging\n\n\nEven though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error \nas-is\n.\n\n\nThe \n--debug\n flag will print all client-server communication to standard error, whereas the \n--debug-auth\n flag\nwill cause all communication related to authentication to standard error.\nIf the \n--debug\n flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.\n\n\nYou may consider redirecting standard error into a file for ease of use, e.g. \ndigitalassetlinks1 --debug \nresource\n \nmethod\n [options] 2\ndebug.txt\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#installation-and-source-code", 
            "text": "Install the command-line interface with cargo using:  cargo install google-digitalassetlinks1-cli  Find the source code  on github .", 
            "title": "Installation and Source Code"
        }, 
        {
            "location": "/#usage", 
            "text": "This documentation was generated from the  digitalassetlinks  API at revision  20181009 . The CLI is at version  1.0.8 .  digitalassetlinks1 [options]\n        assetlinks\n                check [-p  v ]... [-o  out ]\n        statements\n                list [-p  v ]... [-o  out ]\n  digitalassetlinks1 --help\n\nConfiguration:\n  --config-dir  folder \n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.", 
            "title": "Usage"
        }, 
        {
            "location": "/#configuration", 
            "text": "The program will store all persistent data in the  ~/.google-service-cli  directory in  JSON  files prefixed with  digitalassetlinks1- .  You can change the directory used to store configuration with the  --config-dir  flag on a per-invocation basis.  More information about the various kinds of persistent data are given in the following paragraphs.", 
            "title": "Configuration"
        }, 
        {
            "location": "/#authentication", 
            "text": "Most APIs require a user to authenticate any request. If this is the case, the  scope  determines the \nset of permissions granted. The granularity of these is usually no more than  read-only  or  full-access .  If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the  --scope  flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.  The first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.  If a scope was authenticated by the user, the respective information will be stored as  JSON  in the configuration\ndirectory, e.g.  ~/.google-service-cli/digitalassetlinks1-token- scope-hash .json . No manual management of these tokens\nis necessary.  To revoke granted authentication, please refer to the  official documentation .", 
            "title": "Authentication"
        }, 
        {
            "location": "/#application-secrets", 
            "text": "In order to allow any application to use Google services, it will need to be registered using the  Google Developer Console . APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.  To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.  You can workaround this limitation by putting your own secrets file at this location:  ~/.google-service-cli/digitalassetlinks1-secret.json , assuming that the required  digitalassetlinks  API \nwas enabled for it. Such a secret file can be downloaded in the  Google Developer Console  at  APIs   auth -  Credentials -  Download JSON  and used as is.  Learn more about how to setup Google projects and enable APIs using the  official documentation .", 
            "title": "Application Secrets"
        }, 
        {
            "location": "/#debugging", 
            "text": "Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error  as-is .  The  --debug  flag will print all client-server communication to standard error, whereas the  --debug-auth  flag\nwill cause all communication related to authentication to standard error.\nIf the  --debug  flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.  You may consider redirecting standard error into a file for ease of use, e.g.  digitalassetlinks1 --debug  resource   method  [options] 2 debug.txt .", 
            "title": "Debugging"
        }, 
        {
            "location": "/assetlinks_check/", 
            "text": "Determines whether the specified (directional) relationship exists between\nthe specified source and target assets.\n\n\nThe relation describes the intent of the link between the two assets as\nclaimed by the source asset.  An example for such relationships is the\ndelegation of privileges or permissions.\n\n\nThis command is most often used by infrastructure systems to check\npreconditions for an action.  For example, a client may want to know if it\nis OK to send a web URL to a particular mobile app instead. The client can\ncheck for the relevant asset link from the website to the mobile app to\ndecide if the operation should be allowed.\n\n\nA note about security: if you specify a secure asset as the source, such as\nan HTTPS website or an Android app, the API will ensure that any\nstatements used to generate the response have been made in a secure way by\nthe owner of that asset.  Conversely, if the source asset is an insecure\nHTTP website (that is, the URL starts with \nhttp://\n instead of \nhttps://\n),\nthe API cannot verify its statements securely, and it is not possible to\nensure that the website\ns statements have not been altered by a third\nparty.  For more information, see the \nDigital Asset Links technical design\nspecification\n.\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p target-web-site=string\n\n\n\n\n\n\nWeb assets are identified by a URL that contains only the scheme, hostname\n    and port parts.  The format is\n\n\nhttp[s]://\nlt;hostname\ngt;[:\nlt;port\ngt;]\n\n\n\nHostnames must be fully qualified: they must end in a single period\n(\n.\n).\n\n\nOnly the schemes \nhttp\n and \nhttps\n are currently allowed.\n\n\nPort numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.\n\n\nWe call this limited URL the \nsite\n.  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.\n\n\nExample: the asset with the site \nhttps://www.google.com\n contains all\nthese URLs:\n\n\n\n\nhttps://www.google.com/\n\n\nhttps://www.google.com:443/\n\n\nhttps://www.google.com/foo\n\n\nhttps://www.google.com/foo?bar\n\n\nhttps://www.google.com/foo#bar\n\n\nhttps://user@password:www.google.com/\n\n\n\n\nBut it does not contain these URLs:\n\n\n\n\nhttp://www.google.com/\n       (wrong scheme)\n\n\nhttps://google.com/\n          (hostname does not match)\n\n\nhttps://www.google.com:444/\n  (port does not match)\nREQUIRED\n\n\n\n\n\n\n\n\n\n\n\n\n-p source-android-app-package-name=string\n\n\n\n\nAndroid App assets are naturally identified by their Java package name.\n    For example, the Google Maps app uses the package name\n    \ncom.google.android.apps.maps\n.\n    REQUIRED\n\n\n\n\n\n\n\n\n-p relation=string\n\n\n\n\n\n\nQuery string for the relation.\n\n\nWe identify relations with strings of the format \nlt;kind\ngt;/\nlt;detail\ngt;\n, where\n\nlt;kind\ngt;\n must be one of a set of pre-defined purpose categories, and\n\nlt;detail\ngt;\n is a free-form lowercase alphanumeric string that describes the\nspecific use case of the statement.\n\n\nRefer to \nour API documentation\n\nfor the current list of supported relations.\n\n\nFor a query to match an asset link, both the query\ns and the asset link\ns\nrelation strings must match exactly.\n\n\nExample: A query with relation \ndelegate_permission/common.handle_all_urls\n\nmatches an asset link with relation\n\ndelegate_permission/common.handle_all_urls\n.\n\n\n\n\n\n\n\n\n\n\n-p source-android-app-certificate-sha256-fingerprint=string\n\n\n\n\n\n\nThe uppercase SHA-265 fingerprint of the certificate.  From the PEM\n     certificate, it can be acquired like this:\n\n\n$ keytool -printcert -file $CERTFILE | grep SHA256:\nSHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n    42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\n\n\nor like this:\n\n\n$ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\nSHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n    16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\n\n\nIn this example, the contents of this field would be \n14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5\n.\n\n\nIf these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).\n\n\n\n\n\n\n\n\n\n\n-p target-android-app-package-name=string\n\n\n\n\nAndroid App assets are naturally identified by their Java package name.\n    For example, the Google Maps app uses the package name\n    \ncom.google.android.apps.maps\n.\n    REQUIRED\n\n\n\n\n\n\n\n\n-p source-web-site=string\n\n\n\n\n\n\nWeb assets are identified by a URL that contains only the scheme, hostname\n    and port parts.  The format is\n\n\nhttp[s]://\nlt;hostname\ngt;[:\nlt;port\ngt;]\n\n\n\nHostnames must be fully qualified: they must end in a single period\n(\n.\n).\n\n\nOnly the schemes \nhttp\n and \nhttps\n are currently allowed.\n\n\nPort numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.\n\n\nWe call this limited URL the \nsite\n.  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.\n\n\nExample: the asset with the site \nhttps://www.google.com\n contains all\nthese URLs:\n\n\n\n\nhttps://www.google.com/\n\n\nhttps://www.google.com:443/\n\n\nhttps://www.google.com/foo\n\n\nhttps://www.google.com/foo?bar\n\n\nhttps://www.google.com/foo#bar\n\n\nhttps://user@password:www.google.com/\n\n\n\n\nBut it does not contain these URLs:\n\n\n\n\nhttp://www.google.com/\n       (wrong scheme)\n\n\nhttps://google.com/\n          (hostname does not match)\n\n\nhttps://www.google.com:444/\n  (port does not match)\nREQUIRED\n\n\n\n\n\n\n\n\n\n\n\n\n-p target-android-app-certificate-sha256-fingerprint=string\n\n\n\n\n\n\nThe uppercase SHA-265 fingerprint of the certificate.  From the PEM\n     certificate, it can be acquired like this:\n\n\n$ keytool -printcert -file $CERTFILE | grep SHA256:\nSHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n    42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\n\n\nor like this:\n\n\n$ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\nSHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n    16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\n\n\nIn this example, the contents of this field would be \n14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5\n.\n\n\nIf these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).\n\n\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Check"
        }, 
        {
            "location": "/assetlinks_check/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/assetlinks_check/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p target-web-site=string    Web assets are identified by a URL that contains only the scheme, hostname\n    and port parts.  The format is  http[s]:// lt;hostname gt;[: lt;port gt;]  Hostnames must be fully qualified: they must end in a single period\n( . ).  Only the schemes  http  and  https  are currently allowed.  Port numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.  We call this limited URL the  site .  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.  Example: the asset with the site  https://www.google.com  contains all\nthese URLs:   https://www.google.com/  https://www.google.com:443/  https://www.google.com/foo  https://www.google.com/foo?bar  https://www.google.com/foo#bar  https://user@password:www.google.com/   But it does not contain these URLs:   http://www.google.com/        (wrong scheme)  https://google.com/           (hostname does not match)  https://www.google.com:444/   (port does not match)\nREQUIRED       -p source-android-app-package-name=string   Android App assets are naturally identified by their Java package name.\n    For example, the Google Maps app uses the package name\n     com.google.android.apps.maps .\n    REQUIRED     -p relation=string    Query string for the relation.  We identify relations with strings of the format  lt;kind gt;/ lt;detail gt; , where lt;kind gt;  must be one of a set of pre-defined purpose categories, and lt;detail gt;  is a free-form lowercase alphanumeric string that describes the\nspecific use case of the statement.  Refer to  our API documentation \nfor the current list of supported relations.  For a query to match an asset link, both the query s and the asset link s\nrelation strings must match exactly.  Example: A query with relation  delegate_permission/common.handle_all_urls \nmatches an asset link with relation delegate_permission/common.handle_all_urls .      -p source-android-app-certificate-sha256-fingerprint=string    The uppercase SHA-265 fingerprint of the certificate.  From the PEM\n     certificate, it can be acquired like this:  $ keytool -printcert -file $CERTFILE | grep SHA256:\nSHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n    42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5  or like this:  $ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\nSHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n    16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5  In this example, the contents of this field would be  14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5 .  If these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).      -p target-android-app-package-name=string   Android App assets are naturally identified by their Java package name.\n    For example, the Google Maps app uses the package name\n     com.google.android.apps.maps .\n    REQUIRED     -p source-web-site=string    Web assets are identified by a URL that contains only the scheme, hostname\n    and port parts.  The format is  http[s]:// lt;hostname gt;[: lt;port gt;]  Hostnames must be fully qualified: they must end in a single period\n( . ).  Only the schemes  http  and  https  are currently allowed.  Port numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.  We call this limited URL the  site .  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.  Example: the asset with the site  https://www.google.com  contains all\nthese URLs:   https://www.google.com/  https://www.google.com:443/  https://www.google.com/foo  https://www.google.com/foo?bar  https://www.google.com/foo#bar  https://user@password:www.google.com/   But it does not contain these URLs:   http://www.google.com/        (wrong scheme)  https://google.com/           (hostname does not match)  https://www.google.com:444/   (port does not match)\nREQUIRED       -p target-android-app-certificate-sha256-fingerprint=string    The uppercase SHA-265 fingerprint of the certificate.  From the PEM\n     certificate, it can be acquired like this:  $ keytool -printcert -file $CERTFILE | grep SHA256:\nSHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n    42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5  or like this:  $ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\nSHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n    16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5  In this example, the contents of this field would be  14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5 .  If these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/assetlinks_check/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/statements_list/", 
            "text": "Retrieves a list of all statements from a given source that match the\nspecified target and statement string.\n\n\nThe API guarantees that all statements with secure source assets, such as\nHTTPS websites or Android apps, have been made in a secure way by the owner\nof those assets, as described in the \nDigital Asset Links technical design\nspecification\n.\nSpecifically, you should consider that for insecure websites (that is,\nwhere the URL starts with \nhttp://\n instead of \nhttps://\n), this guarantee\ncannot be made.\n\n\nThe \nList\n command is most useful in cases where the API client wants to\nknow all the ways in which two assets are related, or enumerate all the\nrelationships from a particular source asset.  Example: a feature that\nhelps users navigate to related items.  When a mobile app is running on a\ndevice, the feature would make it easy to navigate to the corresponding web\nsite or Google+ profile.\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p source-web-site=string\n\n\n\n\n\n\nWeb assets are identified by a URL that contains only the scheme, hostname\n    and port parts.  The format is\n\n\nhttp[s]://\nlt;hostname\ngt;[:\nlt;port\ngt;]\n\n\n\nHostnames must be fully qualified: they must end in a single period\n(\n.\n).\n\n\nOnly the schemes \nhttp\n and \nhttps\n are currently allowed.\n\n\nPort numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.\n\n\nWe call this limited URL the \nsite\n.  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.\n\n\nExample: the asset with the site \nhttps://www.google.com\n contains all\nthese URLs:\n\n\n\n\nhttps://www.google.com/\n\n\nhttps://www.google.com:443/\n\n\nhttps://www.google.com/foo\n\n\nhttps://www.google.com/foo?bar\n\n\nhttps://www.google.com/foo#bar\n\n\nhttps://user@password:www.google.com/\n\n\n\n\nBut it does not contain these URLs:\n\n\n\n\nhttp://www.google.com/\n       (wrong scheme)\n\n\nhttps://google.com/\n          (hostname does not match)\n\n\nhttps://www.google.com:444/\n  (port does not match)\nREQUIRED\n\n\n\n\n\n\n\n\n\n\n\n\n-p source-android-app-certificate-sha256-fingerprint=string\n\n\n\n\n\n\nThe uppercase SHA-265 fingerprint of the certificate.  From the PEM\n     certificate, it can be acquired like this:\n\n\n$ keytool -printcert -file $CERTFILE | grep SHA256:\nSHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n    42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\n\n\nor like this:\n\n\n$ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\nSHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n    16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n\n\n\nIn this example, the contents of this field would be \n14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5\n.\n\n\nIf these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).\n\n\n\n\n\n\n\n\n\n\n-p relation=string\n\n\n\n\n\n\nUse only associations that match the specified relation.\n\n\nSee the \nStatement\n message for a detailed definition of\nrelation strings.\n\n\nFor a query to match a statement, one of the following must be true:\n\n\n\n\nboth the query\ns and the statement\ns relation strings match exactly,\n     or\n\n\nthe query\ns relation string is empty or missing.\n\n\n\n\nExample: A query with relation \ndelegate_permission/common.handle_all_urls\n\nmatches an asset link with relation\n\ndelegate_permission/common.handle_all_urls\n.\n\n\n\n\n\n\n\n\n\n\n-p source-android-app-package-name=string\n\n\n\n\nAndroid App assets are naturally identified by their Java package name.\n    For example, the Google Maps app uses the package name\n    \ncom.google.android.apps.maps\n.\n    REQUIRED\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "List"
        }, 
        {
            "location": "/statements_list/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/statements_list/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p source-web-site=string    Web assets are identified by a URL that contains only the scheme, hostname\n    and port parts.  The format is  http[s]:// lt;hostname gt;[: lt;port gt;]  Hostnames must be fully qualified: they must end in a single period\n( . ).  Only the schemes  http  and  https  are currently allowed.  Port numbers are given as a decimal number, and they must be omitted if the\nstandard port numbers are used: 80 for http and 443 for https.  We call this limited URL the  site .  All URLs that share the same scheme,\nhostname and port are considered to be a part of the site and thus belong\nto the web asset.  Example: the asset with the site  https://www.google.com  contains all\nthese URLs:   https://www.google.com/  https://www.google.com:443/  https://www.google.com/foo  https://www.google.com/foo?bar  https://www.google.com/foo#bar  https://user@password:www.google.com/   But it does not contain these URLs:   http://www.google.com/        (wrong scheme)  https://google.com/           (hostname does not match)  https://www.google.com:444/   (port does not match)\nREQUIRED       -p source-android-app-certificate-sha256-fingerprint=string    The uppercase SHA-265 fingerprint of the certificate.  From the PEM\n     certificate, it can be acquired like this:  $ keytool -printcert -file $CERTFILE | grep SHA256:\nSHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\\n    42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5  or like this:  $ openssl x509 -in $CERTFILE -noout -fingerprint -sha256\nSHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\\n    16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5  In this example, the contents of this field would be  14:6D:E9:83:C5:73:\n06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:\n44:E5 .  If these tools are not available to you, you can convert the PEM\ncertificate into the DER format, compute the SHA-256 hash of that string\nand represent the result as a hexstring (that is, uppercase hexadecimal\nrepresentations of each octet, separated by colons).      -p relation=string    Use only associations that match the specified relation.  See the  Statement  message for a detailed definition of\nrelation strings.  For a query to match a statement, one of the following must be true:   both the query s and the statement s relation strings match exactly,\n     or  the query s relation string is empty or missing.   Example: A query with relation  delegate_permission/common.handle_all_urls \nmatches an asset link with relation delegate_permission/common.handle_all_urls .      -p source-android-app-package-name=string   Android App assets are naturally identified by their Java package name.\n    For example, the Google Maps app uses the package name\n     com.google.android.apps.maps .\n    REQUIRED", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/statements_list/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }
    ]
}