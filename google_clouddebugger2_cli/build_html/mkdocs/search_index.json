{
    "docs": [
        {
            "location": "/", 
            "text": "The \nclouddebugger2\n command-line interface \n(CLI)\n allows to use most features of the \nGoogle Cloud Debugger\n service from the comfort of your terminal.\n\n\nBy default all output is printed to standard out, but flags can be set to direct it into a file independent of your shell's\ncapabilities. Errors will be printed to standard error, and cause the program's exit code to be non-zero.\n\n\nIf data-structures are requested, these will be returned as pretty-printed JSON, to be useful as input to other tools.\n\n\nEverything else about the \nCloud Debugger\n API can be found at the\n\nofficial documentation site\n.\n\n\nInstallation and Source Code\n\n\nInstall the command-line interface with cargo using:\n\n\ncargo install google-clouddebugger2-cli\n\n\n\n\nFind the source code \non github\n.\n\n\nUsage\n\n\nThis documentation was generated from the \nCloud Debugger\n API at revision \n20190614\n. The CLI is at version \n1.0.12\n.\n\n\nclouddebugger2 [options]\n        controller\n                debuggees-breakpoints-list \ndebuggee-id\n [-p \nv\n]... [-o \nout\n]\n                debuggees-breakpoints-update \ndebuggee-id\n \nid\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                debuggees-register (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n        debugger\n                debuggees-breakpoints-delete \ndebuggee-id\n \nbreakpoint-id\n [-p \nv\n]... [-o \nout\n]\n                debuggees-breakpoints-get \ndebuggee-id\n \nbreakpoint-id\n [-p \nv\n]... [-o \nout\n]\n                debuggees-breakpoints-list \ndebuggee-id\n [-p \nv\n]... [-o \nout\n]\n                debuggees-breakpoints-set \ndebuggee-id\n (-r \nkv\n)... [-p \nv\n]... [-o \nout\n]\n                debuggees-list [-p \nv\n]... [-o \nout\n]\n  clouddebugger2 --help\n\nConfiguration:\n  [--scope \nurl\n]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir \nfolder\n\n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.\n\n\n\n\n\nConfiguration\n\n\nThe program will store all persistent data in the \n~/.google-service-cli\n directory in \nJSON\n files prefixed with \nclouddebugger2-\n.  You can change the directory used to store configuration with the \n--config-dir\n flag on a per-invocation basis.\n\n\nMore information about the various kinds of persistent data are given in the following paragraphs.\n\n\nAuthentication\n\n\nMost APIs require a user to authenticate any request. If this is the case, the \nscope\n determines the \nset of permissions granted. The granularity of these is usually no more than \nread-only\n or \nfull-access\n.\n\n\nIf not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the \n--scope\n flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.\n\n\nThe first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.\n\n\nIf a scope was authenticated by the user, the respective information will be stored as \nJSON\n in the configuration\ndirectory, e.g. \n~/.google-service-cli/clouddebugger2-token-\nscope-hash\n.json\n. No manual management of these tokens\nis necessary.\n\n\nTo revoke granted authentication, please refer to the \nofficial documentation\n.\n\n\nApplication Secrets\n\n\nIn order to allow any application to use Google services, it will need to be registered using the \n\nGoogle Developer Console\n. APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.\n\n\nTo allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.\n\n\nYou can workaround this limitation by putting your own secrets file at this location: \n\n~/.google-service-cli/clouddebugger2-secret.json\n, assuming that the required \nclouddebugger\n API \nwas enabled for it. Such a secret file can be downloaded in the \nGoogle Developer Console\n at \n\nAPIs \n auth -\n Credentials -\n Download JSON\n and used as is.\n\n\nLearn more about how to setup Google projects and enable APIs using the \nofficial documentation\n.\n\n\nDebugging\n\n\nEven though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error \nas-is\n.\n\n\nThe \n--debug\n flag will print all client-server communication to standard error, whereas the \n--debug-auth\n flag\nwill cause all communication related to authentication to standard error.\nIf the \n--debug\n flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.\n\n\nYou may consider redirecting standard error into a file for ease of use, e.g. \nclouddebugger2 --debug \nresource\n \nmethod\n [options] 2\ndebug.txt\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#installation-and-source-code", 
            "text": "Install the command-line interface with cargo using:  cargo install google-clouddebugger2-cli  Find the source code  on github .", 
            "title": "Installation and Source Code"
        }, 
        {
            "location": "/#usage", 
            "text": "This documentation was generated from the  Cloud Debugger  API at revision  20190614 . The CLI is at version  1.0.12 .  clouddebugger2 [options]\n        controller\n                debuggees-breakpoints-list  debuggee-id  [-p  v ]... [-o  out ]\n                debuggees-breakpoints-update  debuggee-id   id  (-r  kv )... [-p  v ]... [-o  out ]\n                debuggees-register (-r  kv )... [-p  v ]... [-o  out ]\n        debugger\n                debuggees-breakpoints-delete  debuggee-id   breakpoint-id  [-p  v ]... [-o  out ]\n                debuggees-breakpoints-get  debuggee-id   breakpoint-id  [-p  v ]... [-o  out ]\n                debuggees-breakpoints-list  debuggee-id  [-p  v ]... [-o  out ]\n                debuggees-breakpoints-set  debuggee-id  (-r  kv )... [-p  v ]... [-o  out ]\n                debuggees-list [-p  v ]... [-o  out ]\n  clouddebugger2 --help\n\nConfiguration:\n  [--scope  url ]...\n            Specify the authentication a method should be executed in. Each scope\n            requires the user to grant this application permission to use it.\n            If unset, it defaults to the shortest scope url for a particular method.\n  --config-dir  folder \n            A directory into which we will store our persistent data. Defaults to\n            a user-writable directory that we will create during the first invocation.\n            [default: ~/.google-service-cli]\n  --debug\n            Output all server communication to standard error. `tx` and `rx` are placed\n            into the same stream.\n  --debug-auth\n            Output all communication related to authentication to standard error. `tx`\n            and `rx` are placed into the same stream.", 
            "title": "Usage"
        }, 
        {
            "location": "/#configuration", 
            "text": "The program will store all persistent data in the  ~/.google-service-cli  directory in  JSON  files prefixed with  clouddebugger2- .  You can change the directory used to store configuration with the  --config-dir  flag on a per-invocation basis.  More information about the various kinds of persistent data are given in the following paragraphs.", 
            "title": "Configuration"
        }, 
        {
            "location": "/#authentication", 
            "text": "Most APIs require a user to authenticate any request. If this is the case, the  scope  determines the \nset of permissions granted. The granularity of these is usually no more than  read-only  or  full-access .  If not set, the system will automatically select the smallest feasible scope, e.g. when invoking a\nmethod that is read-only, it will ask only for a read-only scope. \nYou may use the  --scope  flag to specify a scope directly. \nAll applicable scopes are documented in the respective method's CLI documentation.  The first time a scope is used, the user is asked for permission. Follow the instructions given \nby the CLI to grant permissions, or to decline.  If a scope was authenticated by the user, the respective information will be stored as  JSON  in the configuration\ndirectory, e.g.  ~/.google-service-cli/clouddebugger2-token- scope-hash .json . No manual management of these tokens\nis necessary.  To revoke granted authentication, please refer to the  official documentation .", 
            "title": "Authentication"
        }, 
        {
            "location": "/#application-secrets", 
            "text": "In order to allow any application to use Google services, it will need to be registered using the  Google Developer Console . APIs the application may use are then enabled for it\none by one. Most APIs can be used for free and have a daily quota.  To allow more comfortable usage of the CLI without forcing anyone to register an own application, the CLI\ncomes with a default application secret that is configured accordingly. This also means that heavy usage\nall around the world may deplete the daily quota.  You can workaround this limitation by putting your own secrets file at this location:  ~/.google-service-cli/clouddebugger2-secret.json , assuming that the required  clouddebugger  API \nwas enabled for it. Such a secret file can be downloaded in the  Google Developer Console  at  APIs   auth -  Credentials -  Download JSON  and used as is.  Learn more about how to setup Google projects and enable APIs using the  official documentation .", 
            "title": "Application Secrets"
        }, 
        {
            "location": "/#debugging", 
            "text": "Even though the CLI does its best to provide usable error messages, sometimes it might be desirable to know\nwhat exactly led to a particular issue. This is done by allowing all client-server communication to be \noutput to standard error  as-is .  The  --debug  flag will print all client-server communication to standard error, whereas the  --debug-auth  flag\nwill cause all communication related to authentication to standard error.\nIf the  --debug  flag is set, error-results will be debug-printed, possibly yielding more information about the \nissue at hand.  You may consider redirecting standard error into a file for ease of use, e.g.  clouddebugger2 --debug  resource   method  [options] 2 debug.txt .", 
            "title": "Debugging"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-list/", 
            "text": "Returns the list of all active breakpoints for the debuggee.\n\n\nThe breakpoint specification (\nlocation\n, \ncondition\n, and \nexpressions\n\nfields) is semantically immutable, although the field values may\nchange. For example, an agent may update the location line number\nto reflect the actual line where the breakpoint was set, but this\ndoesn\nt change the breakpoint semantics.\n\n\nThis means that an agent does not need to check if a breakpoint has changed\nwhen it encounters the same breakpoint on a successive call.\nMoreover, an agent should remember the breakpoints that are completed\nuntil the controller removes them from the active list to avoid\nsetting those breakpoints again.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/cloud_debugger\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \nclouddebugger2 --scope \nscope\n controller debuggees-breakpoints-list ...\n\n\nRequired Scalar Argument\n\n\n\n\ndebuggee-id\n \n(string)\n\n\nIdentifies the debuggee.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p wait-token=string\n\n\n\n\nA token that, if specified, blocks the method call until the list\n    of active breakpoints has changed, or a server-selected timeout has\n    expired. The value should be set from the \nnext_wait_token\n field in\n    the last response. The initial value should be set to \n#34;init\n#34;\n.\n\n\n\n\n\n\n\n\n-p success-on-timeout=boolean\n\n\n\n\n\n\nIf set to \ntrue\n (recommended), returns \ngoogle.rpc.Code.OK\n status and\n    sets the \nwait_expired\n response field to \ntrue\n when the server-selected\n    timeout has expired.\n\n\nIf set to \nfalse\n (deprecated), returns \ngoogle.rpc.Code.ABORTED\n status\nwhen the server-selected timeout has expired.\n\n\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Debuggees Breakpoints List"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-list/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/cloud_debugger   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  clouddebugger2 --scope  scope  controller debuggees-breakpoints-list ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-list/#required-scalar-argument", 
            "text": "debuggee-id   (string)  Identifies the debuggee.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-list/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-list/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p wait-token=string   A token that, if specified, blocks the method call until the list\n    of active breakpoints has changed, or a server-selected timeout has\n    expired. The value should be set from the  next_wait_token  field in\n    the last response. The initial value should be set to  #34;init #34; .     -p success-on-timeout=boolean    If set to  true  (recommended), returns  google.rpc.Code.OK  status and\n    sets the  wait_expired  response field to  true  when the server-selected\n    timeout has expired.  If set to  false  (deprecated), returns  google.rpc.Code.ABORTED  status\nwhen the server-selected timeout has expired.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-list/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-update/", 
            "text": "Updates the breakpoint state or mutable fields.\nThe entire Breakpoint message must be sent back to the controller service.\n\n\nUpdates to active breakpoint fields are only allowed if the new value\ndoes not change the breakpoint specification. Updates to the \nlocation\n,\n\ncondition\n and \nexpressions\n fields should not alter the breakpoint\nsemantics. These may only make changes such as canonicalizing a value\nor snapping the location to the correct line of code.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/cloud_debugger\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \nclouddebugger2 --scope \nscope\n controller debuggees-breakpoints-update ...\n\n\nRequired Scalar Arguments\n\n\n\n\ndebuggee-id\n \n(string)\n\n\nIdentifies the debuggee being debugged.\n\n\n\n\n\n\nid\n \n(string)\n\n\nBreakpoint identifier, unique in the scope of the debuggee.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nUpdateActiveBreakpointRequest:\n  breakpoint:\n    action: string\n    condition: string\n    create-time: string\n    expressions: [string]\n    final-time: string\n    id: string\n    is-final-state: boolean\n    labels: { string: string }\n    location:\n      column: integer\n      line: integer\n      path: string\n    log-level: string\n    log-message-format: string\n    status:\n      description:\n        format: string\n        parameters: [string]\n      is-error: boolean\n      refers-to: string\n    user-email: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .breakpoint    action=eirmod\n\n\nAction that the agent should perform when the code at the\n    breakpoint location is hit.\n\n\n\n\n\n\ncondition=sit\n\n\nCondition that triggers the breakpoint.\n    The condition is a compound boolean expression composed using expressions\n    in a programming language at the source location.\n\n\n\n\n\n\ncreate-time=stet\n\n\nTime this breakpoint was created by the server in seconds resolution.\n\n\n\n\n\n\nexpressions=sed\n\n\nList of read-only expressions to evaluate at the breakpoint location.\n    The expressions are composed using expressions in the programming language\n    at the source location. If the breakpoint action is \nLOG\n, the evaluated\n    expressions are included in log statements.\n\n\nEach invocation of this argument appends the given value to the array.\n\n\n\n\n\n\nfinal-time=et\n\n\nTime this breakpoint was finalized as seen by the server in seconds\n    resolution.\n\n\n\n\n\n\nid=dolores\n\n\nBreakpoint identifier, unique in the scope of the debuggee.\n\n\n\n\n\n\nis-final-state=false\n\n\nWhen true, indicates that this is a final result and the\n    breakpoint state will not change from here on.\n\n\n\n\n\n\nlabels=key=accusam\n\n\nA set of custom breakpoint properties, populated by the agent, to be\n    displayed to the user.\n\n\nthe value will be associated with the given \nkey\n\n\n\n\n\n\nlocation    column=93\n\n\nColumn within a line. The first column in a line as the value \n1\n.\n    Agents that do not support setting breakpoints on specific columns ignore\n    this field.\n\n\n\n\n\n\nline=31\n\n\nLine inside the file. The first line in the file has the value \n1\n.\n\n\n\n\n\n\n\n\npath=amet.\n\n\n\n\nPath to the source file within the source context of the target binary.\n\n\n\n\n\n\n\n\n..    log-level=erat\n\n\n\n\nIndicates the severity of the log. Only relevant when action is \nLOG\n.\n\n\n\n\n\n\n\n\nlog-message-format=labore\n\n\n\n\n\n\nOnly relevant when action is \nLOG\n. Defines the message to log when\n    the breakpoint hits. The message may include parameter placeholders \n$0\n,\n    \n$1\n, etc. These placeholders are replaced with the evaluated value\n    of the appropriate expression. Expressions not referenced in\n    \nlog_message_format\n are not logged.\n\n\nExample: \nMessage received, id = $0, count = $1\n with\n\nexpressions\n = \n[ message.id, message.count ]\n.\n* \nstatus.description    format=sea\n\n    - Format template for the message. The \nformat\n uses placeholders \n$0\n,\n\n$1\n, etc. to reference parameters. \n$$\n can be used to denote the \n$\n\ncharacter.\n\n\nExamples:\n\n\n\n\nFailed to load \n#39;$0\n#39; which helps debug $1 the first time it\n    is loaded.  Again, $0 is very important.\n\n\nPlease pay $$10 to use $0 instead of $1.\n\n\nparameters=nonumy\n\n\nOptional parameters to be embedded into the message.\n\n\nEach invocation of this argument appends the given value to the array.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n..    is-error=true\n\n\n\n\nDistinguishes errors from informational messages.\n\n\n\n\n\n\n\n\nrefers-to=gubergren\n\n\n\n\nReference to which the message applies.\n\n\n\n\n\n\n\n\n..    user-email=sadipscing\n\n\n\n\nE-mail address of the user that created this breakpoint\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Debuggees Breakpoints Update"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-update/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/cloud_debugger   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  clouddebugger2 --scope  scope  controller debuggees-breakpoints-update ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-update/#required-scalar-arguments", 
            "text": "debuggee-id   (string)  Identifies the debuggee being debugged.    id   (string)  Breakpoint identifier, unique in the scope of the debuggee.", 
            "title": "Required Scalar Arguments"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-update/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  UpdateActiveBreakpointRequest:\n  breakpoint:\n    action: string\n    condition: string\n    create-time: string\n    expressions: [string]\n    final-time: string\n    id: string\n    is-final-state: boolean\n    labels: { string: string }\n    location:\n      column: integer\n      line: integer\n      path: string\n    log-level: string\n    log-message-format: string\n    status:\n      description:\n        format: string\n        parameters: [string]\n      is-error: boolean\n      refers-to: string\n    user-email: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .breakpoint    action=eirmod  Action that the agent should perform when the code at the\n    breakpoint location is hit.    condition=sit  Condition that triggers the breakpoint.\n    The condition is a compound boolean expression composed using expressions\n    in a programming language at the source location.    create-time=stet  Time this breakpoint was created by the server in seconds resolution.    expressions=sed  List of read-only expressions to evaluate at the breakpoint location.\n    The expressions are composed using expressions in the programming language\n    at the source location. If the breakpoint action is  LOG , the evaluated\n    expressions are included in log statements.  Each invocation of this argument appends the given value to the array.    final-time=et  Time this breakpoint was finalized as seen by the server in seconds\n    resolution.    id=dolores  Breakpoint identifier, unique in the scope of the debuggee.    is-final-state=false  When true, indicates that this is a final result and the\n    breakpoint state will not change from here on.    labels=key=accusam  A set of custom breakpoint properties, populated by the agent, to be\n    displayed to the user.  the value will be associated with the given  key    location    column=93  Column within a line. The first column in a line as the value  1 .\n    Agents that do not support setting breakpoints on specific columns ignore\n    this field.    line=31  Line inside the file. The first line in the file has the value  1 .     path=amet.   Path to the source file within the source context of the target binary.     ..    log-level=erat   Indicates the severity of the log. Only relevant when action is  LOG .     log-message-format=labore    Only relevant when action is  LOG . Defines the message to log when\n    the breakpoint hits. The message may include parameter placeholders  $0 ,\n     $1 , etc. These placeholders are replaced with the evaluated value\n    of the appropriate expression. Expressions not referenced in\n     log_message_format  are not logged.  Example:  Message received, id = $0, count = $1  with expressions  =  [ message.id, message.count ] .\n*  status.description    format=sea \n    - Format template for the message. The  format  uses placeholders  $0 , $1 , etc. to reference parameters.  $$  can be used to denote the  $ \ncharacter.  Examples:   Failed to load  #39;$0 #39; which helps debug $1 the first time it\n    is loaded.  Again, $0 is very important.  Please pay $$10 to use $0 instead of $1.  parameters=nonumy  Optional parameters to be embedded into the message.  Each invocation of this argument appends the given value to the array.         ..    is-error=true   Distinguishes errors from informational messages.     refers-to=gubergren   Reference to which the message applies.     ..    user-email=sadipscing   E-mail address of the user that created this breakpoint", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-update/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-update/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/controller_debuggees-breakpoints-update/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/controller_debuggees-register/", 
            "text": "Registers the debuggee with the controller service.\n\n\nAll agents attached to the same application must call this method with\nexactly the same request content to get back the same stable \ndebuggee_id\n.\nAgents should call this method again whenever \ngoogle.rpc.Code.NOT_FOUND\n\nis returned from any controller method.\n\n\nThis protocol allows the controller service to disable debuggees, recover\nfrom data loss, or change the \ndebuggee_id\n format. Agents must handle\n\ndebuggee_id\n value changing upon re-registration.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/cloud_debugger\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \nclouddebugger2 --scope \nscope\n controller debuggees-register ...\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nRegisterDebuggeeRequest:\n  debuggee:\n    agent-version: string\n    description: string\n    id: string\n    is-disabled: boolean\n    is-inactive: boolean\n    labels: { string: string }\n    project: string\n    status:\n      description:\n        format: string\n        parameters: [string]\n      is-error: boolean\n      refers-to: string\n    uniquifier: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .debuggee    agent-version=aliquyam\n\n\nVersion ID of the agent.\n    Schema: \ndomain/language-platform/vmajor.minor\n (for example\n    \ngoogle.com/java-gcp/v1.1\n).\n\n\n\n\n\n\ndescription=ea\n\n\nHuman readable description of the debuggee.\n    Including a human-readable project name, environment name and version\n    information is recommended.\n\n\n\n\n\n\nid=no\n\n\nUnique identifier for the debuggee generated by the controller service.\n\n\n\n\n\n\nis-disabled=true\n\n\nIf set to \ntrue\n, indicates that the agent should disable itself and\n    detach from the debuggee.\n\n\n\n\n\n\nis-inactive=true\n\n\nIf set to \ntrue\n, indicates that Controller service does not detect any\n    activity from the debuggee agents and the application is possibly stopped.\n\n\n\n\n\n\nlabels=key=et\n\n\nA set of custom debuggee properties, populated by the agent, to be\n    displayed to the user.\n\n\nthe value will be associated with the given \nkey\n\n\n\n\n\n\nproject=et\n\n\nProject the debuggee is associated with.\n    Use project number or id when registering a Google Cloud Platform project.\n\n\n\n\n\n\n\n\nstatus.description    format=diam\n\n\n\n\n\n\nFormat template for the message. The \nformat\n uses placeholders \n$0\n,\n    \n$1\n, etc. to reference parameters. \n$$\n can be used to denote the \n$\n\n    character.\n\n\nExamples:\n\n\n\n\nFailed to load \n#39;$0\n#39; which helps debug $1 the first time it\n    is loaded.  Again, $0 is very important.\n\n\nPlease pay $$10 to use $0 instead of $1.\n\n\nparameters=ipsum\n\n\nOptional parameters to be embedded into the message.\n\n\nEach invocation of this argument appends the given value to the array.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n..    is-error=true\n\n\n\n\nDistinguishes errors from informational messages.\n\n\n\n\n\n\n\n\nrefers-to=et\n\n\n\n\nReference to which the message applies.\n\n\n\n\n\n\n\n\n..    uniquifier=duo\n\n\n\n\nUniquifier to further distinguish the application.\n    It is possible that different applications might have identical values in\n    the debuggee message, thus, incorrectly identified as a single application\n    by the Controller service. This field adds salt to further distinguish the\n    application. Agents should consider seeding this field with value that\n    identifies the code, binary, configuration and environment.\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Debuggees Register"
        }, 
        {
            "location": "/controller_debuggees-register/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/cloud_debugger   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  clouddebugger2 --scope  scope  controller debuggees-register ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/controller_debuggees-register/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  RegisterDebuggeeRequest:\n  debuggee:\n    agent-version: string\n    description: string\n    id: string\n    is-disabled: boolean\n    is-inactive: boolean\n    labels: { string: string }\n    project: string\n    status:\n      description:\n        format: string\n        parameters: [string]\n      is-error: boolean\n      refers-to: string\n    uniquifier: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .debuggee    agent-version=aliquyam  Version ID of the agent.\n    Schema:  domain/language-platform/vmajor.minor  (for example\n     google.com/java-gcp/v1.1 ).    description=ea  Human readable description of the debuggee.\n    Including a human-readable project name, environment name and version\n    information is recommended.    id=no  Unique identifier for the debuggee generated by the controller service.    is-disabled=true  If set to  true , indicates that the agent should disable itself and\n    detach from the debuggee.    is-inactive=true  If set to  true , indicates that Controller service does not detect any\n    activity from the debuggee agents and the application is possibly stopped.    labels=key=et  A set of custom debuggee properties, populated by the agent, to be\n    displayed to the user.  the value will be associated with the given  key    project=et  Project the debuggee is associated with.\n    Use project number or id when registering a Google Cloud Platform project.     status.description    format=diam    Format template for the message. The  format  uses placeholders  $0 ,\n     $1 , etc. to reference parameters.  $$  can be used to denote the  $ \n    character.  Examples:   Failed to load  #39;$0 #39; which helps debug $1 the first time it\n    is loaded.  Again, $0 is very important.  Please pay $$10 to use $0 instead of $1.  parameters=ipsum  Optional parameters to be embedded into the message.  Each invocation of this argument appends the given value to the array.         ..    is-error=true   Distinguishes errors from informational messages.     refers-to=et   Reference to which the message applies.     ..    uniquifier=duo   Uniquifier to further distinguish the application.\n    It is possible that different applications might have identical values in\n    the debuggee message, thus, incorrectly identified as a single application\n    by the Controller service. This field adds salt to further distinguish the\n    application. Agents should consider seeding this field with value that\n    identifies the code, binary, configuration and environment.", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/controller_debuggees-register/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/controller_debuggees-register/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/controller_debuggees-register/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-delete/", 
            "text": "Deletes the breakpoint from the debuggee.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/cloud_debugger\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \nclouddebugger2 --scope \nscope\n debugger debuggees-breakpoints-delete ...\n\n\nRequired Scalar Arguments\n\n\n\n\ndebuggee-id\n \n(string)\n\n\nID of the debuggee whose breakpoint to delete.\n\n\n\n\n\n\nbreakpoint-id\n \n(string)\n\n\nID of the breakpoint to delete.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p client-version=string\n\n\nThe client version making the call.\n    Schema: \ndomain/type/version\n (e.g., \ngoogle.com/intellij/v1\n).\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Debuggees Breakpoints Delete"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-delete/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/cloud_debugger   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  clouddebugger2 --scope  scope  debugger debuggees-breakpoints-delete ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-delete/#required-scalar-arguments", 
            "text": "debuggee-id   (string)  ID of the debuggee whose breakpoint to delete.    breakpoint-id   (string)  ID of the breakpoint to delete.", 
            "title": "Required Scalar Arguments"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-delete/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-delete/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p client-version=string  The client version making the call.\n    Schema:  domain/type/version  (e.g.,  google.com/intellij/v1 ).", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-delete/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-get/", 
            "text": "Gets breakpoint information.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/cloud_debugger\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \nclouddebugger2 --scope \nscope\n debugger debuggees-breakpoints-get ...\n\n\nRequired Scalar Arguments\n\n\n\n\ndebuggee-id\n \n(string)\n\n\nID of the debuggee whose breakpoint to get.\n\n\n\n\n\n\nbreakpoint-id\n \n(string)\n\n\nID of the breakpoint to get.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p client-version=string\n\n\nThe client version making the call.\n    Schema: \ndomain/type/version\n (e.g., \ngoogle.com/intellij/v1\n).\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Debuggees Breakpoints Get"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-get/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/cloud_debugger   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  clouddebugger2 --scope  scope  debugger debuggees-breakpoints-get ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-get/#required-scalar-arguments", 
            "text": "debuggee-id   (string)  ID of the debuggee whose breakpoint to get.    breakpoint-id   (string)  ID of the breakpoint to get.", 
            "title": "Required Scalar Arguments"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-get/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-get/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p client-version=string  The client version making the call.\n    Schema:  domain/type/version  (e.g.,  google.com/intellij/v1 ).", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-get/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-list/", 
            "text": "Lists all breakpoints for the debuggee.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/cloud_debugger\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \nclouddebugger2 --scope \nscope\n debugger debuggees-breakpoints-list ...\n\n\nRequired Scalar Argument\n\n\n\n\ndebuggee-id\n \n(string)\n\n\nID of the debuggee whose breakpoints to list.\n\n\n\n\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p include-all-users=boolean\n\n\n\n\nWhen set to \ntrue\n, the response includes the list of breakpoints set by\n    any user. Otherwise, it includes only breakpoints set by the caller.\n\n\n\n\n\n\n\n\n-p action-value=string\n\n\n\n\nOnly breakpoints with the specified action will pass the filter.\n\n\n\n\n\n\n\n\n-p wait-token=string\n\n\n\n\nA wait token that, if specified, blocks the call until the breakpoints\n    list has changed, or a server selected timeout has expired.  The value\n    should be set from the last response. The error code\n    \ngoogle.rpc.Code.ABORTED\n (RPC) is returned on wait timeout, which\n    should be called again with the same \nwait_token\n.\n\n\n\n\n\n\n\n\n-p include-inactive=boolean\n\n\n\n\nWhen set to \ntrue\n, the response includes active and inactive\n    breakpoints. Otherwise, it includes only active breakpoints.\n\n\n\n\n\n\n\n\n-p strip-results=boolean\n\n\n\n\nThis field is deprecated. The following fields are always stripped out of\n    the result: \nstack_frames\n, \nevaluated_expressions\n and \nvariable_table\n.\n\n\n\n\n\n\n\n\n-p client-version=string\n\n\n\n\nThe client version making the call.\n    Schema: \ndomain/type/version\n (e.g., \ngoogle.com/intellij/v1\n).\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Debuggees Breakpoints List"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-list/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/cloud_debugger   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  clouddebugger2 --scope  scope  debugger debuggees-breakpoints-list ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-list/#required-scalar-argument", 
            "text": "debuggee-id   (string)  ID of the debuggee whose breakpoints to list.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-list/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-list/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p include-all-users=boolean   When set to  true , the response includes the list of breakpoints set by\n    any user. Otherwise, it includes only breakpoints set by the caller.     -p action-value=string   Only breakpoints with the specified action will pass the filter.     -p wait-token=string   A wait token that, if specified, blocks the call until the breakpoints\n    list has changed, or a server selected timeout has expired.  The value\n    should be set from the last response. The error code\n     google.rpc.Code.ABORTED  (RPC) is returned on wait timeout, which\n    should be called again with the same  wait_token .     -p include-inactive=boolean   When set to  true , the response includes active and inactive\n    breakpoints. Otherwise, it includes only active breakpoints.     -p strip-results=boolean   This field is deprecated. The following fields are always stripped out of\n    the result:  stack_frames ,  evaluated_expressions  and  variable_table .     -p client-version=string   The client version making the call.\n    Schema:  domain/type/version  (e.g.,  google.com/intellij/v1 ).", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-list/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-set/", 
            "text": "Sets the breakpoint to the debuggee.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/cloud_debugger\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \nclouddebugger2 --scope \nscope\n debugger debuggees-breakpoints-set ...\n\n\nRequired Scalar Argument\n\n\n\n\ndebuggee-id\n \n(string)\n\n\nID of the debuggee where the breakpoint is to be set.\n\n\n\n\n\n\n\n\nRequired Request Value\n\n\nThe request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.\n\n\nFor example, a structure like this:\n\n\nBreakpoint:\n  action: string\n  condition: string\n  create-time: string\n  expressions: [string]\n  final-time: string\n  id: string\n  is-final-state: boolean\n  labels: { string: string }\n  location:\n    column: integer\n    line: integer\n    path: string\n  log-level: string\n  log-message-format: string\n  status:\n    description:\n      format: string\n      parameters: [string]\n    is-error: boolean\n    refers-to: string\n  user-email: string\n\n\n\n\n\ncan be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.\n\n\n\n\n-r .    action=aliquyam\n\n\nAction that the agent should perform when the code at the\n    breakpoint location is hit.\n\n\n\n\n\n\ncondition=sea\n\n\nCondition that triggers the breakpoint.\n    The condition is a compound boolean expression composed using expressions\n    in a programming language at the source location.\n\n\n\n\n\n\ncreate-time=lorem\n\n\nTime this breakpoint was created by the server in seconds resolution.\n\n\n\n\n\n\nexpressions=eos\n\n\nList of read-only expressions to evaluate at the breakpoint location.\n    The expressions are composed using expressions in the programming language\n    at the source location. If the breakpoint action is \nLOG\n, the evaluated\n    expressions are included in log statements.\n\n\nEach invocation of this argument appends the given value to the array.\n\n\n\n\n\n\nfinal-time=erat\n\n\nTime this breakpoint was finalized as seen by the server in seconds\n    resolution.\n\n\n\n\n\n\nid=sadipscing\n\n\nBreakpoint identifier, unique in the scope of the debuggee.\n\n\n\n\n\n\nis-final-state=true\n\n\nWhen true, indicates that this is a final result and the\n    breakpoint state will not change from here on.\n\n\n\n\n\n\nlabels=key=eirmod\n\n\nA set of custom breakpoint properties, populated by the agent, to be\n    displayed to the user.\n\n\nthe value will be associated with the given \nkey\n\n\n\n\n\n\nlocation    column=58\n\n\nColumn within a line. The first column in a line as the value \n1\n.\n    Agents that do not support setting breakpoints on specific columns ignore\n    this field.\n\n\n\n\n\n\nline=4\n\n\nLine inside the file. The first line in the file has the value \n1\n.\n\n\n\n\n\n\n\n\npath=no\n\n\n\n\nPath to the source file within the source context of the target binary.\n\n\n\n\n\n\n\n\n..    log-level=labore\n\n\n\n\nIndicates the severity of the log. Only relevant when action is \nLOG\n.\n\n\n\n\n\n\n\n\nlog-message-format=eirmod\n\n\n\n\n\n\nOnly relevant when action is \nLOG\n. Defines the message to log when\n    the breakpoint hits. The message may include parameter placeholders \n$0\n,\n    \n$1\n, etc. These placeholders are replaced with the evaluated value\n    of the appropriate expression. Expressions not referenced in\n    \nlog_message_format\n are not logged.\n\n\nExample: \nMessage received, id = $0, count = $1\n with\n\nexpressions\n = \n[ message.id, message.count ]\n.\n* \nstatus.description    format=dolore\n\n    - Format template for the message. The \nformat\n uses placeholders \n$0\n,\n\n$1\n, etc. to reference parameters. \n$$\n can be used to denote the \n$\n\ncharacter.\n\n\nExamples:\n\n\n\n\nFailed to load \n#39;$0\n#39; which helps debug $1 the first time it\n    is loaded.  Again, $0 is very important.\n\n\nPlease pay $$10 to use $0 instead of $1.\n\n\nparameters=invidunt\n\n\nOptional parameters to be embedded into the message.\n\n\nEach invocation of this argument appends the given value to the array.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n..    is-error=false\n\n\n\n\nDistinguishes errors from informational messages.\n\n\n\n\n\n\n\n\nrefers-to=accusam\n\n\n\n\nReference to which the message applies.\n\n\n\n\n\n\n\n\n..    user-email=lorem\n\n\n\n\nE-mail address of the user that created this breakpoint\n\n\n\n\n\n\n\n\nAbout Cursors\n\n\nThe cursor position is key to comfortably set complex nested structures. The following rules apply:\n\n\n\n\nThe cursor position is always set relative to the current one, unless the field name starts with the \n.\n character. Fields can be nested such as in \n-r f.s.o\n .\n\n\nThe cursor position is set relative to the top-level structure if it starts with \n.\n, e.g. \n-r .s.s\n\n\nYou can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify \n-r struct.sub_struct=bar\n.\n\n\nYou can move the cursor one level up by using \n..\n. Each additional \n.\n moves it up one additional level. E.g. \n...\n would go three levels up.\n\n\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n-p client-version=string\n\n\nThe client version making the call.\n    Schema: \ndomain/type/version\n (e.g., \ngoogle.com/intellij/v1\n).\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Debuggees Breakpoints Set"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-set/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/cloud_debugger   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  clouddebugger2 --scope  scope  debugger debuggees-breakpoints-set ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-set/#required-scalar-argument", 
            "text": "debuggee-id   (string)  ID of the debuggee where the breakpoint is to be set.", 
            "title": "Required Scalar Argument"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-set/#required-request-value", 
            "text": "The request value is a data-structure with various fields. Each field may be a simple scalar or another data-structure.\nIn the latter case it is advised to set the field-cursor to the data-structure's field to specify values more concisely.  For example, a structure like this:  Breakpoint:\n  action: string\n  condition: string\n  create-time: string\n  expressions: [string]\n  final-time: string\n  id: string\n  is-final-state: boolean\n  labels: { string: string }\n  location:\n    column: integer\n    line: integer\n    path: string\n  log-level: string\n  log-message-format: string\n  status:\n    description:\n      format: string\n      parameters: [string]\n    is-error: boolean\n    refers-to: string\n  user-email: string  can be set completely with the following arguments which are assumed to be executed in the given order. Note how the cursor position is adjusted to the respective structures, allowing simple field names to be used most of the time.   -r .    action=aliquyam  Action that the agent should perform when the code at the\n    breakpoint location is hit.    condition=sea  Condition that triggers the breakpoint.\n    The condition is a compound boolean expression composed using expressions\n    in a programming language at the source location.    create-time=lorem  Time this breakpoint was created by the server in seconds resolution.    expressions=eos  List of read-only expressions to evaluate at the breakpoint location.\n    The expressions are composed using expressions in the programming language\n    at the source location. If the breakpoint action is  LOG , the evaluated\n    expressions are included in log statements.  Each invocation of this argument appends the given value to the array.    final-time=erat  Time this breakpoint was finalized as seen by the server in seconds\n    resolution.    id=sadipscing  Breakpoint identifier, unique in the scope of the debuggee.    is-final-state=true  When true, indicates that this is a final result and the\n    breakpoint state will not change from here on.    labels=key=eirmod  A set of custom breakpoint properties, populated by the agent, to be\n    displayed to the user.  the value will be associated with the given  key    location    column=58  Column within a line. The first column in a line as the value  1 .\n    Agents that do not support setting breakpoints on specific columns ignore\n    this field.    line=4  Line inside the file. The first line in the file has the value  1 .     path=no   Path to the source file within the source context of the target binary.     ..    log-level=labore   Indicates the severity of the log. Only relevant when action is  LOG .     log-message-format=eirmod    Only relevant when action is  LOG . Defines the message to log when\n    the breakpoint hits. The message may include parameter placeholders  $0 ,\n     $1 , etc. These placeholders are replaced with the evaluated value\n    of the appropriate expression. Expressions not referenced in\n     log_message_format  are not logged.  Example:  Message received, id = $0, count = $1  with expressions  =  [ message.id, message.count ] .\n*  status.description    format=dolore \n    - Format template for the message. The  format  uses placeholders  $0 , $1 , etc. to reference parameters.  $$  can be used to denote the  $ \ncharacter.  Examples:   Failed to load  #39;$0 #39; which helps debug $1 the first time it\n    is loaded.  Again, $0 is very important.  Please pay $$10 to use $0 instead of $1.  parameters=invidunt  Optional parameters to be embedded into the message.  Each invocation of this argument appends the given value to the array.         ..    is-error=false   Distinguishes errors from informational messages.     refers-to=accusam   Reference to which the message applies.     ..    user-email=lorem   E-mail address of the user that created this breakpoint", 
            "title": "Required Request Value"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-set/#about-cursors", 
            "text": "The cursor position is key to comfortably set complex nested structures. The following rules apply:   The cursor position is always set relative to the current one, unless the field name starts with the  .  character. Fields can be nested such as in  -r f.s.o  .  The cursor position is set relative to the top-level structure if it starts with  . , e.g.  -r .s.s  You can also set nested fields without setting the cursor explicitly. For example, to set a value relative to the current cursor position, you would specify  -r struct.sub_struct=bar .  You can move the cursor one level up by using  .. . Each additional  .  moves it up one additional level. E.g.  ...  would go three levels up.", 
            "title": "About Cursors"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-set/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-set/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.   -p client-version=string  The client version making the call.\n    Schema:  domain/type/version  (e.g.,  google.com/intellij/v1 ).", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/debugger_debuggees-breakpoints-set/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }, 
        {
            "location": "/debugger_debuggees-list/", 
            "text": "Lists all the debuggees that the user has access to.\n\n\nScopes\n\n\nYou will need authorization for at least one of the following scopes to make a valid call:\n\n\n\n\nhttps://www.googleapis.com/auth/cloud-platform\n\n\nhttps://www.googleapis.com/auth/cloud_debugger\n\n\n\n\nIf unset, the scope for this method defaults to \nhttps://www.googleapis.com/auth/cloud-platform\n.\nYou can set the scope for this method like this: \nclouddebugger2 --scope \nscope\n debugger debuggees-list ...\n\n\nOptional Output Flags\n\n\nThe method's return value a JSON encoded structure, which will be written to standard output by default.\n\n\n\n\n-o out\n\n\nout\n specifies the \ndestination\n to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The \ndestination\n may be \n-\n to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.\n\n\n\n\n\n\n\n\nOptional Method Properties\n\n\nYou may set the following properties to further configure the call. Please note that \n-p\n is followed by one \nor more key-value-pairs, and is called like this \n-p k1=v1 k2=v2\n even though the listing below repeats the\n\n-p\n for completeness.\n\n\n\n\n\n\n-p client-version=string\n\n\n\n\nThe client version making the call.\n    Schema: \ndomain/type/version\n (e.g., \ngoogle.com/intellij/v1\n).\n\n\n\n\n\n\n\n\n-p project=string\n\n\n\n\nProject number of a Google Cloud project whose debuggees to list.\n\n\n\n\n\n\n\n\n-p include-inactive=boolean\n\n\n\n\nWhen set to \ntrue\n, the result includes all debuggees. Otherwise, the\n    result includes only debuggees that are active.\n\n\n\n\n\n\n\n\nOptional General Properties\n\n\nThe following properties can configure any call, and are not specific to this method.\n\n\n\n\n\n\n-p $-xgafv=string\n\n\n\n\nV1 error format.\n\n\n\n\n\n\n\n\n-p access-token=string\n\n\n\n\nOAuth access token.\n\n\n\n\n\n\n\n\n-p alt=string\n\n\n\n\nData format for response.\n\n\n\n\n\n\n\n\n-p callback=string\n\n\n\n\nJSONP\n\n\n\n\n\n\n\n\n-p fields=string\n\n\n\n\nSelector specifying which fields to include in a partial response.\n\n\n\n\n\n\n\n\n-p key=string\n\n\n\n\nAPI key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.\n\n\n\n\n\n\n\n\n-p oauth-token=string\n\n\n\n\nOAuth 2.0 token for the current user.\n\n\n\n\n\n\n\n\n-p pretty-print=boolean\n\n\n\n\nReturns response with indentations and line breaks.\n\n\n\n\n\n\n\n\n-p quota-user=string\n\n\n\n\nAvailable to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.\n\n\n\n\n\n\n\n\n-p upload-type=string\n\n\n\n\nLegacy upload protocol for media (e.g. \nmedia\n, \nmultipart\n).\n\n\n\n\n\n\n\n\n-p upload-protocol=string\n\n\n\n\nUpload protocol for media (e.g. \nraw\n, \nmultipart\n).", 
            "title": "Debuggees List"
        }, 
        {
            "location": "/debugger_debuggees-list/#scopes", 
            "text": "You will need authorization for at least one of the following scopes to make a valid call:   https://www.googleapis.com/auth/cloud-platform  https://www.googleapis.com/auth/cloud_debugger   If unset, the scope for this method defaults to  https://www.googleapis.com/auth/cloud-platform .\nYou can set the scope for this method like this:  clouddebugger2 --scope  scope  debugger debuggees-list ...", 
            "title": "Scopes"
        }, 
        {
            "location": "/debugger_debuggees-list/#optional-output-flags", 
            "text": "The method's return value a JSON encoded structure, which will be written to standard output by default.   -o out  out  specifies the  destination  to which to write the server's result to.\n  It will be a JSON-encoded structure.\n  The  destination  may be  -  to indicate standard output, or a filepath that is to contain the received bytes.\n  If unset, it defaults to standard output.", 
            "title": "Optional Output Flags"
        }, 
        {
            "location": "/debugger_debuggees-list/#optional-method-properties", 
            "text": "You may set the following properties to further configure the call. Please note that  -p  is followed by one \nor more key-value-pairs, and is called like this  -p k1=v1 k2=v2  even though the listing below repeats the -p  for completeness.    -p client-version=string   The client version making the call.\n    Schema:  domain/type/version  (e.g.,  google.com/intellij/v1 ).     -p project=string   Project number of a Google Cloud project whose debuggees to list.     -p include-inactive=boolean   When set to  true , the result includes all debuggees. Otherwise, the\n    result includes only debuggees that are active.", 
            "title": "Optional Method Properties"
        }, 
        {
            "location": "/debugger_debuggees-list/#optional-general-properties", 
            "text": "The following properties can configure any call, and are not specific to this method.    -p $-xgafv=string   V1 error format.     -p access-token=string   OAuth access token.     -p alt=string   Data format for response.     -p callback=string   JSONP     -p fields=string   Selector specifying which fields to include in a partial response.     -p key=string   API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.     -p oauth-token=string   OAuth 2.0 token for the current user.     -p pretty-print=boolean   Returns response with indentations and line breaks.     -p quota-user=string   Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.     -p upload-type=string   Legacy upload protocol for media (e.g.  media ,  multipart ).     -p upload-protocol=string   Upload protocol for media (e.g.  raw ,  multipart ).", 
            "title": "Optional General Properties"
        }
    ]
}