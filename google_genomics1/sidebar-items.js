initSidebarItems({"enum":[["Error",""],["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"fn":[["remove_json_null_values",""]],"struct":[["Annotation","An annotation describes a region of reference genome. The value of an annotation may be one of several canonical types, supplemented by arbitrary info tags. An annotation is not inherently associated with a specific sample or individual (though a client could choose to use annotations in this way). Example canonical annotation types are `GENE` and `VARIANT`."],["AnnotationBatchCreateCall","Creates one or more new annotations atomically. All annotations must belong to the same annotation set. Caller must have WRITE permission for this annotation set. For optimal performance, batch positionally adjacent annotations together. If the request has a systemic issue, such as an attempt to write to an inaccessible annotation set, the entire RPC will fail accordingly. For lesser data issues, when possible an error will be isolated to the corresponding batch entry in the response; the remaining well formed annotations will be created normally. For details on the requirements for each individual annotation resource, see CreateAnnotation."],["AnnotationCreateCall","Creates a new annotation. Caller must have WRITE permission for the associated annotation set. The following fields are required: * annotationSetId * referenceName or referenceId ### Transcripts For annotations of type TRANSCRIPT, the following fields of transcript must be provided: * `exons.start` * `exons.end` All other fields may be optionally specified, unless documented as being server-generated (for example, the `id` field). The annotated range must be no longer than 100Mbp (mega base pairs). See the Annotation resource for additional restrictions on each field."],["AnnotationDeleteCall","Deletes an annotation. Caller must have WRITE permission for the associated annotation set."],["AnnotationGetCall","Gets an annotation. Caller must have READ permission for the associated annotation set."],["AnnotationMethods","A builder providing access to all methods supported on *annotation* resources. It is not used directly, but through the `Genomics` hub."],["AnnotationSearchCall","Searches for annotations that match the given criteria. Results are ordered by genomic coordinate (by reference sequence, then position). Annotations with equivalent genomic coordinates are returned in an unspecified order. This order is consistent, such that two queries for the same content (regardless of page size) yield annotations in the same order across their respective streams of paginated responses. Caller must have READ permission for the queried annotation sets."],["AnnotationSet","An annotation set is a logical grouping of annotations that share consistent type information and provenance. Examples of annotation sets include 'all genes from refseq', and 'all variant annotations from ClinVar'."],["AnnotationUpdateCall","Updates an annotation. Caller must have WRITE permission for the associated dataset."],["AnnotationsetCreateCall","Creates a new annotation set. Caller must have WRITE permission for the associated dataset. The following fields are required: * datasetId * referenceSetId All other fields may be optionally specified, unless documented as being server-generated (for example, the `id` field)."],["AnnotationsetDeleteCall","Deletes an annotation set. Caller must have WRITE permission for the associated annotation set."],["AnnotationsetGetCall","Gets an annotation set. Caller must have READ permission for the associated dataset."],["AnnotationsetMethods","A builder providing access to all methods supported on *annotationset* resources. It is not used directly, but through the `Genomics` hub."],["AnnotationsetSearchCall","Searches for annotation sets that match the given criteria. Annotation sets are returned in an unspecified order. This order is consistent, such that two queries for the same content (regardless of page size) yield annotation sets in the same order across their respective streams of paginated responses. Caller must have READ permission for the queried datasets."],["AnnotationsetUpdateCall","Updates an annotation set. The update must respect all mutability restrictions and other invariants described on the annotation set resource. Caller must have WRITE permission for the associated dataset."],["BatchCreateAnnotationsRequest","There is no detailed description."],["BatchCreateAnnotationsResponse","There is no detailed description."],["Binding","Associates `members` with a `role`."],["CallSet","A call set is a collection of variant calls, typically for one sample. It belongs to a variant set. For more genomics resource definitions, see Fundamentals of Google Genomics"],["CallsetCreateCall","Creates a new call set. For the definitions of call sets and other genomics resources, see Fundamentals of Google Genomics"],["CallsetDeleteCall","Deletes a call set. For the definitions of call sets and other genomics resources, see Fundamentals of Google Genomics"],["CallsetGetCall","Gets a call set by ID. For the definitions of call sets and other genomics resources, see Fundamentals of Google Genomics"],["CallsetMethods","A builder providing access to all methods supported on *callset* resources. It is not used directly, but through the `Genomics` hub."],["CallsetPatchCall","Updates a call set. For the definitions of call sets and other genomics resources, see Fundamentals of Google Genomics This method supports patch semantics."],["CallsetSearchCall","Gets a list of call sets matching the criteria. For the definitions of call sets and other genomics resources, see Fundamentals of Google Genomics Implements GlobalAllianceApi.searchCallSets."],["CancelOperationRequest","The request message for Operations.CancelOperation."],["CigarUnit","A single CIGAR operation."],["ClinicalCondition","There is no detailed description."],["CodingSequence","There is no detailed description."],["CoverageBucket","A bucket over which read coverage has been precomputed. A bucket corresponds to a specific range of the reference sequence."],["Dataset","A Dataset is a collection of genomic data. For more genomics resource definitions, see Fundamentals of Google Genomics"],["DatasetCreateCall","Creates a new dataset. For the definitions of datasets and other genomics resources, see Fundamentals of Google Genomics"],["DatasetDeleteCall","Deletes a dataset and all of its contents (all read group sets, reference sets, variant sets, call sets, annotation sets, etc.) This is reversible (up to one week after the deletion) via the datasets.undelete operation. For the definitions of datasets and other genomics resources, see Fundamentals of Google Genomics"],["DatasetGetCall","Gets a dataset by ID. For the definitions of datasets and other genomics resources, see Fundamentals of Google Genomics"],["DatasetGetIamPolicyCall","Gets the access control policy for the dataset. This is empty if the policy or resource does not exist. See Getting a Policy for more information. For the definitions of datasets and other genomics resources, see Fundamentals of Google Genomics"],["DatasetListCall","Lists datasets within a project. For the definitions of datasets and other genomics resources, see Fundamentals of Google Genomics"],["DatasetMethods","A builder providing access to all methods supported on *dataset* resources. It is not used directly, but through the `Genomics` hub."],["DatasetPatchCall","Updates a dataset. For the definitions of datasets and other genomics resources, see Fundamentals of Google Genomics This method supports patch semantics."],["DatasetSetIamPolicyCall","Sets the access control policy on the specified dataset. Replaces any existing policy. For the definitions of datasets and other genomics resources, see Fundamentals of Google Genomics See Setting a Policy for more information."],["DatasetTestIamPermissionCall","Returns permissions that a caller has on the specified resource. See Testing Permissions for more information. For the definitions of datasets and other genomics resources, see Fundamentals of Google Genomics"],["DatasetUndeleteCall","Undeletes a dataset by restoring a dataset which was deleted via this API. For the definitions of datasets and other genomics resources, see Fundamentals of Google Genomics This operation is only possible for a week after the deletion occurred."],["DefaultDelegate","A delegate with a conservative default implementation, which is used if no other delegate is set."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["Entry","There is no detailed description."],["ErrorResponse","A utility to represent detailed errors we might see in case there are BadRequests. The latter happen if the sent parameters or request structures are unsound"],["Exon","There is no detailed description."],["Experiment","There is no detailed description."],["ExportReadGroupSetRequest","The read group set export request."],["ExportVariantSetRequest","The variant data export request."],["ExternalId","There is no detailed description."],["Genomics","Central instance to access all Genomics related resource activities"],["GetIamPolicyRequest","Request message for `GetIamPolicy` method."],["ImportReadGroupSetsRequest","The read group set import request."],["ImportVariantsRequest","The variant data import request."],["LinearAlignment","A linear alignment can be represented by one CIGAR string. Describes the mapped position and local alignment of the read to the reference."],["ListBasesResponse","There is no detailed description."],["ListCoverageBucketsResponse","There is no detailed description."],["ListDatasetsResponse","The dataset list response."],["ListOperationsResponse","The response message for Operations.ListOperations."],["MergeVariantsRequest","There is no detailed description."],["MethodInfo","Contains information about an API request."],["MultiPartReader","Provides a `Read` interface that converts multiple parts into the protocol identified by RFC2387. **Note**: This implementation is just as rich as it needs to be to perform uploads to google APIs, and might not be a fully-featured implementation."],["Operation","This resource represents a long-running operation that is the result of a network API call."],["OperationCancelCall","Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation."],["OperationGetCall","Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."],["OperationListCall","Lists operations that match the specified filter in the request."],["OperationMethods","A builder providing access to all methods supported on *operation* resources. It is not used directly, but through the `Genomics` hub."],["Policy","Defines an Identity and Access Management (IAM) policy. It is used to specify access control policies for Cloud Platform resources. A `Policy` consists of a list of `bindings`. A `Binding` binds a list of `members` to a `role`, where the members can be user accounts, Google groups, Google domains, and service accounts. A `role` is a named list of permissions defined by IAM. **Example** { \"bindings\": [ { \"role\": \"roles/owner\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-other-app@appspot.gserviceaccount.com\", ] }, { \"role\": \"roles/viewer\", \"members\": [\"user:sean@example.com\"] } ] } For a description of IAM and its features, see the IAM developer's guide."],["Position","An abstraction for referring to a genomic position, in relation to some already known reference. For now, represents a genomic position as a reference name, a base number on that reference (0-based), and a determination of forward or reverse strand."],["Program","There is no detailed description."],["Range","A 0-based half-open genomic coordinate range for search requests."],["Read","A read alignment describes a linear alignment of a string of DNA to a reference sequence, in addition to metadata about the fragment (the molecule of DNA sequenced) and the read (the bases which were read by the sequencer). A read is equivalent to a line in a SAM file. A read belongs to exactly one read group and exactly one read group set. For more genomics resource definitions, see Fundamentals of Google Genomics ### Reverse-stranded reads Mapped reads (reads having a non-null `alignment`) can be aligned to either the forward or the reverse strand of their associated reference. Strandedness of a mapped read is encoded by `alignment.position.reverseStrand`. If we consider the reference to be a forward-stranded coordinate space of `[0, reference.length)` with `0` as the left-most position and `reference.length` as the right-most position, reads are always aligned left to right. That is, `alignment.position.position` always refers to the left-most reference coordinate and `alignment.cigar` describes the alignment of this read to the reference from left to right. All per-base fields such as `alignedSequence` and `alignedQuality` share this same left-to-right orientation; this is true of reads which are aligned to either strand. For reverse-stranded reads, this means that `alignedSequence` is the reverse complement of the bases that were originally reported by the sequencing machine. ### Generating a reference-aligned sequence string When interacting with mapped reads, it's often useful to produce a string representing the local alignment of the read to reference. The following pseudocode demonstrates one way of doing this: out = \"\" offset = 0 for c in read.alignment.cigar { switch c.operation { case \"ALIGNMENT_MATCH\", \"SEQUENCE_MATCH\", \"SEQUENCE_MISMATCH\": out += read.alignedSequence[offset:offset+c.operationLength] offset += c.operationLength break case \"CLIP_SOFT\", \"INSERT\": offset += c.operationLength break case \"PAD\": out += repeat(\"*\", c.operationLength) break case \"DELETE\": out += repeat(\"-\", c.operationLength) break case \"SKIP\": out += repeat(\" \", c.operationLength) break case \"CLIP_HARD\": break } } return out ### Converting to SAM's CIGAR string The following pseudocode generates a SAM CIGAR string from the `cigar` field. Note that this is a lossy conversion (`cigar.referenceSequence` is lost). cigarMap = { \"ALIGNMENT_MATCH\": \"M\", \"INSERT\": \"I\", \"DELETE\": \"D\", \"SKIP\": \"N\", \"CLIP_SOFT\": \"S\", \"CLIP_HARD\": \"H\", \"PAD\": \"P\", \"SEQUENCE_MATCH\": \"=\", \"SEQUENCE_MISMATCH\": \"X\", } cigarStr = \"\" for c in read.alignment.cigar { cigarStr += c.operationLength + cigarMap[c.operation] } return cigarStr"],["ReadGroup","A read group is all the data that's processed the same way by the sequencer."],["ReadGroupSet","A read group set is a logical collection of read groups, which are collections of reads produced by a sequencer. A read group set typically models reads corresponding to one sample, sequenced one way, and aligned one way. * A read group set belongs to one dataset. * A read group belongs to one read group set. * A read belongs to one read group. For more genomics resource definitions, see Fundamentals of Google Genomics"],["ReadMethods","A builder providing access to all methods supported on *read* resources. It is not used directly, but through the `Genomics` hub."],["ReadSearchCall","Gets a list of reads for one or more read group sets. For the definitions of read group sets and other genomics resources, see Fundamentals of Google Genomics Reads search operates over a genomic coordinate space of reference sequence & position defined over the reference sequences to which the requested read group sets are aligned. If a target positional range is specified, search returns all reads whose alignment to the reference genome overlap the range. A query which specifies only read group set IDs yields all reads in those read group sets, including unmapped reads. All reads returned (including reads on subsequent pages) are ordered by genomic coordinate (by reference sequence, then position). Reads with equivalent genomic coordinates are returned in an unspecified order. This order is consistent, such that two queries for the same content (regardless of page size) yield reads in the same order across their respective streams of paginated responses. Implements GlobalAllianceApi.searchReads."],["ReadStreamCall","Returns a stream of all the reads matching the search request, ordered by reference name, position, and ID."],["ReadgroupsetCoveragebucketListCall","Lists fixed width coverage buckets for a read group set, each of which correspond to a range of a reference sequence. Each bucket summarizes coverage information across its corresponding genomic range. For the definitions of read group sets and other genomics resources, see Fundamentals of Google Genomics Coverage is defined as the number of reads which are aligned to a given base in the reference sequence. Coverage buckets are available at several precomputed bucket widths, enabling retrieval of various coverage 'zoom levels'. The caller must have READ permissions for the target read group set."],["ReadgroupsetDeleteCall","Deletes a read group set. For the definitions of read group sets and other genomics resources, see Fundamentals of Google Genomics"],["ReadgroupsetExportCall","Exports a read group set to a BAM file in Google Cloud Storage. For the definitions of read group sets and other genomics resources, see Fundamentals of Google Genomics Note that currently there may be some differences between exported BAM files and the original BAM file at the time of import. See ImportReadGroupSets for caveats."],["ReadgroupsetGetCall","Gets a read group set by ID. For the definitions of read group sets and other genomics resources, see Fundamentals of Google Genomics"],["ReadgroupsetImportCall","Creates read group sets by asynchronously importing the provided information. For the definitions of read group sets and other genomics resources, see Fundamentals of Google Genomics The caller must have WRITE permissions to the dataset. ## Notes on BAM import - Tags will be converted to strings - tag types are not preserved - Comments (`@CO`) in the input file header will not be preserved - Original header order of references (`@SQ`) will not be preserved - Any reverse stranded unmapped reads will be reverse complemented, and their qualities (also the \"BQ\" and \"OQ\" tags, if any) will be reversed - Unmapped reads will be stripped of positional information (reference name and position)"],["ReadgroupsetMethods","A builder providing access to all methods supported on *readgroupset* resources. It is not used directly, but through the `Genomics` hub."],["ReadgroupsetPatchCall","Updates a read group set. For the definitions of read group sets and other genomics resources, see Fundamentals of Google Genomics This method supports patch semantics."],["ReadgroupsetSearchCall","Searches for read group sets matching the criteria. For the definitions of read group sets and other genomics resources, see Fundamentals of Google Genomics Implements GlobalAllianceApi.searchReadGroupSets."],["Reference","A reference is a canonical assembled DNA sequence, intended to act as a reference coordinate space for other genomic annotations. A single reference might represent the human chromosome 1 or mitochandrial DNA, for instance. A reference belongs to one or more reference sets. For more genomics resource definitions, see Fundamentals of Google Genomics"],["ReferenceBaseListCall","Lists the bases in a reference, optionally restricted to a range. For the definitions of references and other genomics resources, see Fundamentals of Google Genomics Implements GlobalAllianceApi.getReferenceBases."],["ReferenceBound","ReferenceBound records an upper bound for the starting coordinate of variants in a particular reference."],["ReferenceGetCall","Gets a reference. For the definitions of references and other genomics resources, see Fundamentals of Google Genomics Implements GlobalAllianceApi.getReference."],["ReferenceMethods","A builder providing access to all methods supported on *reference* resources. It is not used directly, but through the `Genomics` hub."],["ReferenceSearchCall","Searches for references which match the given criteria. For the definitions of references and other genomics resources, see Fundamentals of Google Genomics Implements GlobalAllianceApi.searchReferences."],["ReferenceSet","A reference set is a set of references which typically comprise a reference assembly for a species, such as `GRCh38` which is representative of the human genome. A reference set defines a common coordinate space for comparing reference-aligned experimental data. A reference set contains 1 or more references. For more genomics resource definitions, see Fundamentals of Google Genomics"],["ReferencesetGetCall","Gets a reference set. For the definitions of references and other genomics resources, see Fundamentals of Google Genomics Implements GlobalAllianceApi.getReferenceSet."],["ReferencesetMethods","A builder providing access to all methods supported on *referenceset* resources. It is not used directly, but through the `Genomics` hub."],["ReferencesetSearchCall","Searches for reference sets which match the given criteria. For the definitions of references and other genomics resources, see Fundamentals of Google Genomics Implements GlobalAllianceApi.searchReferenceSets"],["SearchAnnotationSetsRequest","There is no detailed description."],["SearchAnnotationSetsResponse","There is no detailed description."],["SearchAnnotationsRequest","There is no detailed description."],["SearchAnnotationsResponse","There is no detailed description."],["SearchCallSetsRequest","The call set search request."],["SearchCallSetsResponse","The call set search response."],["SearchReadGroupSetsRequest","The read group set search request."],["SearchReadGroupSetsResponse","The read group set search response."],["SearchReadsRequest","The read search request."],["SearchReadsResponse","The read search response."],["SearchReferenceSetsRequest","There is no detailed description."],["SearchReferenceSetsResponse","There is no detailed description."],["SearchReferencesRequest","There is no detailed description."],["SearchReferencesResponse","There is no detailed description."],["SearchVariantSetsRequest","The search variant sets request."],["SearchVariantSetsResponse","The search variant sets response."],["SearchVariantsRequest","The variant search request."],["SearchVariantsResponse","The variant search response."],["SetIamPolicyRequest","Request message for `SetIamPolicy` method."],["Status","The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC. The error model is designed to be: - Simple to use and understand for most users - Flexible enough to meet unexpected needs # Overview The `Status` message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of google.rpc.Code, but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers *understand* and *resolve* the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package `google.rpc` which can be used for common error conditions. # Language mapping The `Status` message is the logical representation of the error model, but it is not necessarily the actual wire format. When the `Status` message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C. # Other uses The error model and the `Status` message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments. Example uses of this error model include: - Partial errors. If a service needs to return partial errors to the client, it may embed the `Status` in the normal response to indicate the partial errors. - Workflow errors. A typical workflow has multiple steps. Each step may have a `Status` message for error reporting purpose. - Batch operations. If a client uses batch request and batch response, the `Status` message should be used directly inside batch response, one for each error sub-response. - Asynchronous operations. If an API call embeds asynchronous operation results in its response, the status of those operations should be represented directly using the `Status` message. - Logging. If some API errors are stored in logs, the message `Status` could be used directly after any stripping needed for security/privacy reasons."],["StreamReadsRequest","The stream reads request."],["StreamReadsResponse","There is no detailed description."],["StreamVariantsRequest","The stream variants request."],["StreamVariantsResponse","There is no detailed description."],["TestIamPermissionsRequest","Request message for `TestIamPermissions` method."],["TestIamPermissionsResponse","Response message for `TestIamPermissions` method."],["Transcript","A transcript represents the assertion that a particular region of the reference genome may be transcribed as RNA."],["UndeleteDatasetRequest","There is no detailed description."],["Variant","A variant represents a change in DNA sequence relative to a reference sequence. For example, a variant could represent a SNP or an insertion. Variants belong to a variant set. For more genomics resource definitions, see Fundamentals of Google Genomics Each of the calls on a variant represent a determination of genotype with respect to that variant. For example, a call might assign probability of 0.32 to the occurrence of a SNP named rs1234 in a sample named NA12345. A call belongs to a call set, which contains related calls typically from one sample."],["VariantAnnotation","There is no detailed description."],["VariantCall","A call represents the determination of genotype with respect to a particular variant. It may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named rs1234 in a call set with the name NA12345."],["VariantCreateCall","Creates a new variant. For the definitions of variants and other genomics resources, see Fundamentals of Google Genomics"],["VariantDeleteCall","Deletes a variant. For the definitions of variants and other genomics resources, see Fundamentals of Google Genomics"],["VariantGetCall","Gets a variant by ID. For the definitions of variants and other genomics resources, see Fundamentals of Google Genomics"],["VariantImportCall","Creates variant data by asynchronously importing the provided information. For the definitions of variant sets and other genomics resources, see Fundamentals of Google Genomics The variants for import will be merged with any existing variant that matches its reference sequence, start, end, reference bases, and alternative bases. If no such variant exists, a new one will be created. When variants are merged, the call information from the new variant is added to the existing variant, and Variant info fields are merged as specified in infoMergeConfig. As a special case, for single-sample VCF files, QUAL and FILTER fields will be moved to the call level; these are sometimes interpreted in a call-specific context. Imported VCF headers are appended to the metadata already in a variant set."],["VariantMergeCall","Merges the given variants with existing variants. For the definitions of variants and other genomics resources, see Fundamentals of Google Genomics Each variant will be merged with an existing variant that matches its reference sequence, start, end, reference bases, and alternative bases. If no such variant exists, a new one will be created. When variants are merged, the call information from the new variant is added to the existing variant. Variant info fields are merged as specified in the infoMergeConfig field of the MergeVariantsRequest. Please exercise caution when using this method! It is easy to introduce mistakes in existing variants and difficult to back out of them. For example, suppose you were trying to merge a new variant with an existing one and both variants contain calls that belong to callsets with the same callset ID. // Existing variant - irrelevant fields trimmed for clarity { \"variantSetId\": \"10473108253681171589\", \"referenceName\": \"1\", \"start\": \"10582\", \"referenceBases\": \"G\", \"alternateBases\": [ \"A\" ], \"calls\": [ { \"callSetId\": \"10473108253681171589-0\", \"callSetName\": \"CALLSET0\", \"genotype\": [ 0, 1 ], } ] } // New variant with conflicting call information { \"variantSetId\": \"10473108253681171589\", \"referenceName\": \"1\", \"start\": \"10582\", \"referenceBases\": \"G\", \"alternateBases\": [ \"A\" ], \"calls\": [ { \"callSetId\": \"10473108253681171589-0\", \"callSetName\": \"CALLSET0\", \"genotype\": [ 1, 1 ], } ] } The resulting merged variant would overwrite the existing calls with those from the new variant: { \"variantSetId\": \"10473108253681171589\", \"referenceName\": \"1\", \"start\": \"10582\", \"referenceBases\": \"G\", \"alternateBases\": [ \"A\" ], \"calls\": [ { \"callSetId\": \"10473108253681171589-0\", \"callSetName\": \"CALLSET0\", \"genotype\": [ 1, 1 ], } ] } This may be the desired outcome, but it is up to the user to determine if if that is indeed the case."],["VariantMethods","A builder providing access to all methods supported on *variant* resources. It is not used directly, but through the `Genomics` hub."],["VariantPatchCall","Updates a variant. For the definitions of variants and other genomics resources, see Fundamentals of Google Genomics This method supports patch semantics. Returns the modified variant without its calls."],["VariantSearchCall","Gets a list of variants matching the criteria. For the definitions of variants and other genomics resources, see Fundamentals of Google Genomics Implements GlobalAllianceApi.searchVariants."],["VariantSet","A variant set is a collection of call sets and variants. It contains summary statistics of those contents. A variant set belongs to a dataset. For more genomics resource definitions, see Fundamentals of Google Genomics"],["VariantSetMetadata","Metadata describes a single piece of variant call metadata. These data include a top level key and either a single value string (value) or a list of key-value pairs (info.) Value and info are mutually exclusive."],["VariantStreamCall","Returns a stream of all the variants matching the search request, ordered by reference name, position, and ID."],["VariantsetCreateCall","Creates a new variant set. For the definitions of variant sets and other genomics resources, see Fundamentals of Google Genomics The provided variant set must have a valid `datasetId` set - all other fields are optional. Note that the `id` field will be ignored, as this is assigned by the server."],["VariantsetDeleteCall","Deletes a variant set including all variants, call sets, and calls within. This is not reversible. For the definitions of variant sets and other genomics resources, see Fundamentals of Google Genomics"],["VariantsetExportCall","Exports variant set data to an external destination. For the definitions of variant sets and other genomics resources, see Fundamentals of Google Genomics"],["VariantsetGetCall","Gets a variant set by ID. For the definitions of variant sets and other genomics resources, see Fundamentals of Google Genomics"],["VariantsetMethods","A builder providing access to all methods supported on *variantset* resources. It is not used directly, but through the `Genomics` hub."],["VariantsetPatchCall","Updates a variant set using patch semantics. For the definitions of variant sets and other genomics resources, see Fundamentals of Google Genomics"],["VariantsetSearchCall","Returns a list of all variant sets matching search criteria. For the definitions of variant sets and other genomics resources, see Fundamentals of Google Genomics Implements GlobalAllianceApi.searchVariantSets."]],"trait":[["CallBuilder","Identifies types which represent builders for a particular resource method"],["Delegate","A trait specifying functionality to help controlling any request performed by the API. The trait has a conservative default implementation."],["Hub","Identifies the Hub. There is only one per library, this trait is supposed to make intended use more explicit. The hub allows to access all resource methods more easily."],["MethodsBuilder","Identifies types for building methods of a particular resource type"],["NestedType","Identifies types which are only used by other types internally. They have no special meaning, this trait just marks them for completeness."],["Part","Identifies types which are only used as part of other types, which usually are carrying the `Resource` trait."],["ReadSeek","A utility to specify reader types which provide seeking capabilities too"],["RequestValue","Identifies types which are used in API requests."],["Resource","Identifies types which can be inserted and deleted. Types with this trait are most commonly used by clients of this API."],["ResponseResult","Identifies types which are used in API responses."],["ToParts","A trait for all types that can convert themselves into a *parts* string"]],"type":[["Result","A universal result type used as return for all calls."]]});