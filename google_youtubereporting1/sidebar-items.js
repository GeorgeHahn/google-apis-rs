initSidebarItems({"enum":[["Error",""],["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"fn":[["remove_json_null_values",""]],"struct":[["DefaultDelegate","A delegate with a conservative default implementation, which is used if no other delegate is set."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["ErrorResponse","A utility to represent detailed errors we might see in case there are BadRequests. The latter happen if the sent parameters or request structures are unsound"],["Job","A job creating reports of a specific type."],["JobCreateCall","Creates a job and returns it."],["JobDeleteCall","Deletes a job."],["JobGetCall","Gets a job."],["JobListCall","Lists jobs."],["JobMethods","A builder providing access to all methods supported on *job* resources. It is not used directly, but through the `YouTubeReporting` hub."],["JobReportGetCall","Gets the metadata of a specific report."],["JobReportListCall","Lists reports created by a specific job. Returns NOT_FOUND if the job does not exist."],["ListJobsResponse","Response message for ReportingService.ListJobs."],["ListReportTypesResponse","Response message for ReportingService.ListReportTypes."],["ListReportsResponse","Response message for ReportingService.ListReports."],["Media","Media resource."],["MediaDownloadCall","Method for media download. Download is supported on the URI `/v1/media/{+name}?alt=media`."],["MediaMethods","A builder providing access to all methods supported on *media* resources. It is not used directly, but through the `YouTubeReporting` hub."],["MethodInfo","Contains information about an API request."],["MultiPartReader","Provides a `Read` interface that converts multiple parts into the protocol identified by RFC2387. **Note**: This implementation is just as rich as it needs to be to perform uploads to google APIs, and might not be a fully-featured implementation."],["Report","A report's metadata including the URL from which the report itself can be downloaded."],["ReportType","A report type."],["ReportTypeListCall","Lists report types."],["ReportTypeMethods","A builder providing access to all methods supported on *reportType* resources. It is not used directly, but through the `YouTubeReporting` hub."],["YouTubeReporting","Central instance to access all YouTubeReporting related resource activities"]],"trait":[["CallBuilder","Identifies types which represent builders for a particular resource method"],["Delegate","A trait specifying functionality to help controlling any request performed by the API. The trait has a conservative default implementation."],["Hub","Identifies the Hub. There is only one per library, this trait is supposed to make intended use more explicit. The hub allows to access all resource methods more easily."],["MethodsBuilder","Identifies types for building methods of a particular resource type"],["NestedType","Identifies types which are only used by other types internally. They have no special meaning, this trait just marks them for completeness."],["Part","Identifies types which are only used as part of other types, which usually are carrying the `Resource` trait."],["ReadSeek","A utility to specify reader types which provide seeking capabilities too"],["RequestValue","Identifies types which are used in API requests."],["Resource","Identifies types which can be inserted and deleted. Types with this trait are most commonly used by clients of this API."],["ResponseResult","Identifies types which are used in API responses."],["ToParts","A trait for all types that can convert themselves into a *parts* string"]],"type":[["Result","A universal result type used as return for all calls."]]});