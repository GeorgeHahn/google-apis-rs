initSidebarItems({"enum":[["Error",""],["Scope","Identifies the an OAuth2 authorization scope. A scope is needed when requesting an authorization token."]],"fn":[["remove_json_null_values",""]],"struct":[["Binding","Associates `members` with a `role`."],["CloudAuditOptions","Write a Cloud Audit log"],["Condition","A condition to be met."],["CounterOptions","Options for counters"],["CreateServiceAccountKeyRequest","The service account key create request."],["CreateServiceAccountRequest","The service account create request."],["DataAccessOptions","Write a Data Access (Gin) log"],["DefaultDelegate","A delegate with a conservative default implementation, which is used if no other delegate is set."],["Empty","A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."],["ErrorResponse","A utility to represent detailed errors we might see in case there are BadRequests. The latter happen if the sent parameters or request structures are unsound"],["Iam","Central instance to access all Iam related resource activities"],["ListServiceAccountKeysResponse","The service account keys list response."],["ListServiceAccountsResponse","The service account list response."],["LogConfig","Specifies what kind of log the caller must write Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in \"_count\". Field names should not contain an initial slash. The actual exported metric names will have \"/iam/policy\" prepended. Field names correspond to IAM request parameters and field values are their respective values. At present only \"iam_principal\", corresponding to IAMContext.principal, is supported. Examples: counter { metric: \"/debug_access_count\" field: \"iam_principal\" } ==> increment counter /iam/policy/backend_debug_access_count {iam_principal=[value of IAMContext.principal]} At this time we do not support: * multiple field names (though this may be supported in the future) * decrementing the counter * incrementing it by anything other than 1"],["MethodInfo","Contains information about an API request."],["MultiPartReader","Provides a `Read` interface that converts multiple parts into the protocol identified by RFC2387. **Note**: This implementation is just as rich as it needs to be to perform uploads to google APIs, and might not be a fully-featured implementation."],["Policy","Defines an Identity and Access Management (IAM) policy. It is used to specify access control policies for Cloud Platform resources. A `Policy` consists of a list of `bindings`. A `Binding` binds a list of `members` to a `role`, where the members can be user accounts, Google groups, Google domains, and service accounts. A `role` is a named list of permissions defined by IAM. **Example** { \"bindings\": [ { \"role\": \"roles/owner\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-other-app@appspot.gserviceaccount.com\"] }, { \"role\": \"roles/viewer\", \"members\": [\"user:sean@example.com\"] } ] } For a description of IAM and its features, see the IAM developer's guide."],["ProjectMethods","A builder providing access to all methods supported on *project* resources. It is not used directly, but through the `Iam` hub."],["ProjectServiceAccountCreateCall","Creates a service account and returns it."],["ProjectServiceAccountDeleteCall","Deletes a service acount."],["ProjectServiceAccountGetCall","Gets a ServiceAccount"],["ProjectServiceAccountGetIamPolicyCall","Returns the IAM access control policy for specified IAM resource."],["ProjectServiceAccountKeyCreateCall","Creates a service account key and returns it."],["ProjectServiceAccountKeyDeleteCall","Deletes a service account key."],["ProjectServiceAccountKeyGetCall","Gets the ServiceAccountKey by key id."],["ProjectServiceAccountKeyListCall","Lists service account keys"],["ProjectServiceAccountListCall","Lists service accounts for a project."],["ProjectServiceAccountSetIamPolicyCall","Sets the IAM access control policy for the specified IAM resource."],["ProjectServiceAccountSignBlobCall","Signs a blob using a service account."],["ProjectServiceAccountTestIamPermissionCall","Tests the specified permissions against the IAM access control policy for the specified IAM resource."],["ProjectServiceAccountUpdateCall","Updates a service account. Currently, only the following fields are updatable: 'display_name' . The 'etag' is mandatory."],["Rule","A rule to be applied in a Policy."],["ServiceAccount","A service account in the Identity and Access Management API. To create a service account, you specify the project_id and account_id for the account. The account_id is unique within the project, and used to generate the service account email address and a stable unique id. All other methods can identify accounts using the format \"projects/{project}/serviceAccounts/{account}\". Using '-' as a wildcard for the project, will infer the project from the account. The account value can be the email address or the unique_id of the service account."],["ServiceAccountKey","Represents a service account key. A service account can have 0 or more key pairs. The private keys for these are not stored by Google. ServiceAccountKeys are immutable."],["SetIamPolicyRequest","Request message for `SetIamPolicy` method."],["SignBlobRequest","The service account sign blob request."],["SignBlobResponse","The service account sign blob response."],["TestIamPermissionsRequest","Request message for `TestIamPermissions` method."],["TestIamPermissionsResponse","Response message for `TestIamPermissions` method."]],"trait":[["CallBuilder","Identifies types which represent builders for a particular resource method"],["Delegate","A trait specifying functionality to help controlling any request performed by the API. The trait has a conservative default implementation."],["Hub","Identifies the Hub. There is only one per library, this trait is supposed to make intended use more explicit. The hub allows to access all resource methods more easily."],["MethodsBuilder","Identifies types for building methods of a particular resource type"],["NestedType","Identifies types which are only used by other types internally. They have no special meaning, this trait just marks them for completeness."],["Part","Identifies types which are only used as part of other types, which usually are carrying the `Resource` trait."],["ReadSeek","A utility to specify reader types which provide seeking capabilities too"],["RequestValue","Identifies types which are used in API requests."],["Resource","Identifies types which can be inserted and deleted. Types with this trait are most commonly used by clients of this API."],["ResponseResult","Identifies types which are used in API responses."],["ToParts","A trait for all types that can convert themselves into a *parts* string"]],"type":[["Result","A universal result type used as return for all calls."]]});